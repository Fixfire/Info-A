#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\begin_preamble
\IfFileExists{lmodern.sty}{\usepackage{lmodern}}{}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter tgcursor
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language french
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Esercizi su funzioni ricorsive in C
\end_layout

\begin_layout Author
Stefano Cherubin
\begin_inset Foot
status open

\begin_layout Plain Layout
<nome>.<cognome>@polimi.it
\end_layout

\end_inset


\end_layout

\begin_layout Date
05/12/2016
\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Address
[
\series bold
Informatica A
\series default
] Esercitazione #12
\end_layout

\begin_layout Standard
\begin_inset VSpace 5theight%
\end_inset


\end_layout

\begin_layout Right Address
corso per Ing.
 Gestionale a.a.
 2016/17
\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Ricerca binaria
\end_layout

\begin_layout Quotation
Si consideri già disponibile il seguente frammento di codice
\end_layout

\begin_layout Quotation
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout LyX-Code

#include <stdio.h> 
\end_layout

\begin_layout LyX-Code

#define MAXLEN 15
\end_layout

\begin_layout LyX-Code

void loadVector(int v[], int *n) {
\end_layout

\begin_layout LyX-Code

	int i;
\end_layout

\begin_layout LyX-Code

	do {
\end_layout

\begin_layout LyX-Code

		printf("
\backslash
nQuanti elementi nel vettore? (0 - %d):", MAXLEN);
\end_layout

\begin_layout LyX-Code

		scanf("%d", n); /*scanf("%d, &*n")*/
\end_layout

\begin_layout LyX-Code

	} while (*n < 0 || *n > MAXLEN);
\end_layout

\begin_layout LyX-Code

	printf("
\backslash
nInserisci %d elementi del vettore, separa con spazi ", *n);
\end_layout

\begin_layout LyX-Code

	for (i = 0; i < *n; ++i) {
\end_layout

\begin_layout LyX-Code

		scanf("%d", &v[i]);
\end_layout

\begin_layout LyX-Code

	}
\end_layout

\begin_layout LyX-Code

}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

void sortVector(int v[], int n) {
\end_layout

\begin_layout LyX-Code

	int i, j, tmp;
\end_layout

\begin_layout LyX-Code

	for (i = 0; i < n - 1; i++) {
\end_layout

\begin_layout LyX-Code

		for (j = i; j < n; j++) {
\end_layout

\begin_layout LyX-Code

			if (v[i] > v[j]) {
\end_layout

\begin_layout LyX-Code

				tmp = v[i];
\end_layout

\begin_layout LyX-Code

				v[i] = v[j];
\end_layout

\begin_layout LyX-Code

				v[j] = tmp;
\end_layout

\begin_layout LyX-Code

			}
\end_layout

\begin_layout LyX-Code

		}
\end_layout

\begin_layout LyX-Code

	}
\end_layout

\begin_layout LyX-Code

}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Scrivere una funzione ricorsiva che esegua la ricerca di un elemento all'interno
 del vettore secondo l'algoritmo di ricerca binaria (aka ricerca dicotomica).
\end_layout

\begin_layout Enumerate
Scrivere un programma che acquisisca in input un vettore di numeri interi
 e una chiave di ricerca (anch'essa come numero intero) e attraverso la
 funzione di ricerca scritta al punto precedente stabilisca se l'elemento
 chiave è contenuto nel vettore oppure no.
\end_layout

\begin_layout Enumerate
Se necessario, modifcare il codice finora scritto per fare in modo che la
 funzione di ricerca abbia il seguente prototipo 
\begin_inset listings
lstparams "language=C,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline true
status open

\begin_layout Plain Layout

int binarySearch(int key, int v[], int n);
\end_layout

\end_inset

 .
\end_layout

\begin_layout Enumerate
Scrivere la funzione di ricerca binaria in versione iterativa (senza l'utilizzo
 di ricorsione).
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Subsection
Soluzione
\end_layout

\begin_layout Subsubsection
Ricerca binaria (ricorsiva)
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout LyX-Code

\begin_inset Caption Standard

\begin_layout Plain Layout
Ricerca binaria ricorsiva
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

int binarySearch(int key, int v[], int start, int end) {
\end_layout

\begin_layout LyX-Code

	int middle = (end + start) / 2;
\end_layout

\begin_layout LyX-Code

	if (start > end) {
\end_layout

\begin_layout LyX-Code

		return -1;
\end_layout

\begin_layout LyX-Code

	}
\end_layout

\begin_layout LyX-Code

	if (v[middle] == key) {
\end_layout

\begin_layout LyX-Code

		return middle;
\end_layout

\begin_layout LyX-Code

	}
\end_layout

\begin_layout LyX-Code

	if (key > v[middle]) {
\end_layout

\begin_layout LyX-Code

		return binarySearch(key, v, middle+1, end);
\end_layout

\begin_layout LyX-Code

	}
\end_layout

\begin_layout LyX-Code

	return binarySearch(key, v, start, middle-1); 
\end_layout

\begin_layout LyX-Code

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Programma
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout LyX-Code

\begin_inset Caption Standard

\begin_layout Plain Layout
Programma per la ricerca
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

int main() {
\end_layout

\begin_layout LyX-Code

	int v[MAXLEN];
\end_layout

\begin_layout LyX-Code

	int n, key, ret;
\end_layout

\begin_layout LyX-Code

	loadVector(v, &n);
\end_layout

\begin_layout LyX-Code

	sortVector(v, n);
\end_layout

\begin_layout LyX-Code

	printf("
\backslash
nInsert an element as search key:");
\end_layout

\begin_layout LyX-Code

	scanf("%d", &key);
\end_layout

\begin_layout LyX-Code

	ret = binarySearch(key, v, 0, n);
\end_layout

\begin_layout LyX-Code

	if (ret == -1)
\end_layout

\begin_layout LyX-Code

		printf("
\backslash
nElemento NON trovato.");
\end_layout

\begin_layout LyX-Code

	else
\end_layout

\begin_layout LyX-Code

		printf("
\backslash
nElemento trovato.");
\end_layout

\begin_layout LyX-Code

	return 0;
\end_layout

\begin_layout LyX-Code

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Subsubsection
Programma e funzione (modificati)
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout LyX-Code

\begin_inset Caption Standard

\begin_layout Plain Layout
Ricerca binaria (con wrapper)
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

/* La medesima funzione di prima, rinominata */
\end_layout

\begin_layout LyX-Code

int _binarySearch(int key, int v[], int start, int end) {
\end_layout

\begin_layout LyX-Code

	int middle = (end + start) / 2;
\end_layout

\begin_layout LyX-Code

	if (start > end) {
\end_layout

\begin_layout LyX-Code

		return -1;
\end_layout

\begin_layout LyX-Code

	}
\end_layout

\begin_layout LyX-Code

	if (v[middle] == key) {
\end_layout

\begin_layout LyX-Code

		return middle;
\end_layout

\begin_layout LyX-Code

	}
\end_layout

\begin_layout LyX-Code

	if (key > v[middle]) {
\end_layout

\begin_layout LyX-Code

		return _binarySearch(key, v, middle + 1, end);
\end_layout

\begin_layout LyX-Code

	}
\end_layout

\begin_layout LyX-Code

	return _binarySearch(key, v, start, middle - 1);
\end_layout

\begin_layout LyX-Code

}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

/* Funzione "wrapper" che si occupa solo di eseguire l'inizializzazione
 del parametro mancante per la funzione _binarySearch */
\end_layout

\begin_layout LyX-Code

int binarySearch(int key, int v[], int n) {
\end_layout

\begin_layout LyX-Code

	return _binarySearch(key, v, 0, n); 
\end_layout

\begin_layout LyX-Code

} 
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

int main() {
\end_layout

\begin_layout LyX-Code

	int v[MAXLEN];
\end_layout

\begin_layout LyX-Code

	int n, key, ret;
\end_layout

\begin_layout LyX-Code

	loadVector(v, &n);
\end_layout

\begin_layout LyX-Code

	sortVector(v, n);
\end_layout

\begin_layout LyX-Code

	printf("
\backslash
nInserisci una chiave da cercare:");
\end_layout

\begin_layout LyX-Code

	scanf("%d", &key);
\end_layout

\begin_layout LyX-Code

	ret = binarySearch(key, v, n);
\end_layout

\begin_layout LyX-Code

	if (ret == -1)
\end_layout

\begin_layout LyX-Code

		printf("
\backslash
nElemento NON trovato.");
\end_layout

\begin_layout LyX-Code

	else
\end_layout

\begin_layout LyX-Code

		printf("
\backslash
nElemento trovato.");
\end_layout

\begin_layout LyX-Code

	return 0;
\end_layout

\begin_layout LyX-Code

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Subsubsection
Versione iterativa
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout LyX-Code

\begin_inset Caption Standard

\begin_layout Plain Layout
Ricerca binaria iterativa
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

int binarySearchIter(int key, int v[], int n) {
\end_layout

\begin_layout LyX-Code

	int start, end, middle;
\end_layout

\begin_layout LyX-Code

	start = 0;
\end_layout

\begin_layout LyX-Code

	end = n;
\end_layout

\begin_layout LyX-Code

	while (start < end) {
\end_layout

\begin_layout LyX-Code

		middle = (start + end) / 2;
\end_layout

\begin_layout LyX-Code

		if (v[middle] == key) {
\end_layout

\begin_layout LyX-Code

			return middle;
\end_layout

\begin_layout LyX-Code

		}
\end_layout

\begin_layout LyX-Code

		if (key < v[middle]) {
\end_layout

\begin_layout LyX-Code

			end = middle - 1;
\end_layout

\begin_layout LyX-Code

		} else {
\end_layout

\begin_layout LyX-Code

			start = middle + 1;
\end_layout

\begin_layout LyX-Code

		}
\end_layout

\begin_layout LyX-Code

	}
\end_layout

\begin_layout LyX-Code

	return -1;
\end_layout

\begin_layout LyX-Code

} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Inversione array ricorsiva
\end_layout

\begin_layout Quotation
Scrivere una funzione che inverta un vettore di interi con prodedimento
 ricorsivo.
\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Subsection
Soluzione C
\end_layout

\begin_layout Quotation
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout LyX-Code

void vectorInverterRecursive(int v[], int n) {
\end_layout

\begin_layout LyX-Code

	if (n <= 1)	return;
\end_layout

\begin_layout LyX-Code

	int t = v[0];
\end_layout

\begin_layout LyX-Code

	v[0] = v[n - 1];
\end_layout

\begin_layout LyX-Code

	v[n - 1] = t;
\end_layout

\begin_layout LyX-Code

	vectorInverterRecursive(&v[1], n - 2);
\end_layout

\begin_layout LyX-Code

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Boom Bang
\end_layout

\begin_layout Quotation
Scrivere una funzione ricorsiva 
\begin_inset listings
lstparams "language=C,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline true
status open

\begin_layout Plain Layout

void BoomBang(int k)
\end_layout

\end_inset

 che stampa 
\begin_inset Formula $k$
\end_inset

 volte la stringa 
\begin_inset listings
lstparams "language=C,basicstyle={\ttfamily},tabsize=2"
inline true
status open

\begin_layout Plain Layout

"Boom"
\end_layout

\end_inset

 seguita dalla stampa della stringa 
\begin_inset listings
lstparams "language=C,basicstyle={\ttfamily},tabsize=2"
inline true
status open

\begin_layout Plain Layout

"Bang"
\end_layout

\end_inset

 anch'essa 
\begin_inset Formula $k$
\end_inset

 volte.
\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Subsection
Soluzione C
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout LyX-Code

\begin_inset Caption Standard

\begin_layout Plain Layout
Boom Bang
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

void BoomBang(int k) {
\end_layout

\begin_layout LyX-Code

	if (k == 0)
\end_layout

\begin_layout LyX-Code

		return;
\end_layout

\begin_layout LyX-Code

	printf("Boom ");
\end_layout

\begin_layout LyX-Code

	BoomBang(k - 1);
\end_layout

\begin_layout LyX-Code

	printf("Bang ");
\end_layout

\begin_layout LyX-Code

} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Potenza ricorsiva
\end_layout

\begin_layout Quotation
Scrivere una funzione che calcoli il valore 
\begin_inset Formula $M^{N}$
\end_inset

, con 
\begin_inset Formula $M$
\end_inset

 numero in virgola mobile e 
\begin_inset Formula $N$
\end_inset

 numero intero.
\end_layout

\begin_layout Enumerate
Si implementi la funzione rispecchiando la seguente specifica:
\end_layout

\begin_deeper
\begin_layout Itemize
se 
\begin_inset Formula $N$
\end_inset

 = 0 allora 
\begin_inset Formula $M^{N}$
\end_inset

 = 1
\begin_inset Marginal
status open

\begin_layout Plain Layout

\emph on
caso base
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
se 
\begin_inset Formula $N$
\end_inset

 è pari allora 
\begin_inset Formula $M^{N}$
\end_inset

 = 
\begin_inset Formula $\left(M^{\nicefrac{M}{2}}\right)^{2}$
\end_inset


\begin_inset Marginal
status open

\begin_layout Plain Layout

\emph on
passo indut.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
se 
\begin_inset Formula $N$
\end_inset

 è dispari allora 
\begin_inset Formula $M^{N}$
\end_inset

 = 
\begin_inset Formula $\left(M^{N-1}\right)\cdot M$
\end_inset


\begin_inset Marginal
status open

\begin_layout Plain Layout

\emph on
passo indut.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Si trovi il modo di gestire anche il caso di potenze negative 
\begin_inset Formula $\left(N<0\right)$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Subsection
Soluzione C
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout LyX-Code

\begin_inset Caption Standard

\begin_layout Plain Layout
Potenza ricorsiva
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

double myExp(double M, int N) {
\end_layout

\begin_layout LyX-Code

	if (N < 0) {
\end_layout

\begin_layout LyX-Code

		return myExp(1.0 / M, -N); 
\end_layout

\begin_layout LyX-Code

	}
\end_layout

\begin_layout LyX-Code

	if (N == 0) {
\end_layout

\begin_layout LyX-Code

		return 1;
\end_layout

\begin_layout LyX-Code

	}
\end_layout

\begin_layout LyX-Code

	if (N % 2 == 0) { 
\end_layout

\begin_layout LyX-Code

		long t = myExp(M, N / 2); 
\end_layout

\begin_layout LyX-Code

		return t*t; 
\end_layout

\begin_layout LyX-Code

	} 
\end_layout

\begin_layout LyX-Code

	if (N % 2 == 1) {
\end_layout

\begin_layout LyX-Code

		return M * myExp(M, N - 1);
\end_layout

\begin_layout LyX-Code

	}
\end_layout

\begin_layout LyX-Code

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Triangolo di Tartaglia
\end_layout

\begin_layout Standard
Un coefficiente binomiale 
\begin_inset Formula $\binom{n}{k}$
\end_inset

 è il coefficiente che ha il 
\begin_inset Formula $k$
\end_inset

-esimo termine dello sviluppo della potenza 
\begin_inset Formula $n$
\end_inset

 di un binomio, 
\begin_inset Formula $\left(a+b\right)^{n}$
\end_inset

, ordinando per potenze decrescenti di 
\begin_inset Formula $a$
\end_inset

.
\end_layout

\begin_layout Standard
Il triangolo di tartaglia è formato dai coefficienti binomiali aventi 
\begin_inset Formula $n$
\end_inset

 cresscenti dall'alto verso il basso e 
\begin_inset Formula $k$
\end_inset

 crescenti da sinistra verso destra.
\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="11" columns="12">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\downarrow n\backslash k\rightarrow$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $0$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $1$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $2$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $3$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $4$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $0$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $1$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $2$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $3$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $4$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $0$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\binom{0}{0}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $1$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\binom{1}{0}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\binom{1}{1}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $2$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\binom{2}{0}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\binom{2}{1}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\binom{2}{2}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $3$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\binom{3}{0}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\binom{3}{1}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\binom{3}{2}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\binom{3}{3}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $4$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\binom{4}{0}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\binom{4}{1}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\binom{4}{2}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\binom{4}{3}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\binom{4}{4}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Subsection
Coefficienti Binomiali
\end_layout

\begin_layout Standard
Sulla base del triangolo di Tartaglia sopra indicato, si scriva una funzione
 per il calcolo del coefficiente binomiale 
\begin_inset listings
lstparams "language=C,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline true
status open

\begin_layout Plain Layout

int cobin(int n, int k)
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Approccio alla soluzione
\end_layout

\begin_layout Standard
Come si può notare dall'inizio del triangolo di Tartaglia tracciato poco
 sopra, ogni riga può essere ottenuta a partire dalla riga precedente, secondo
 le seguenti regole:
\end_layout

\begin_layout Itemize
con 
\begin_inset Formula $k=0$
\end_inset

 e con 
\begin_inset Formula $k=n$
\end_inset

 si ha che 
\begin_inset Formula $\binom{n}{k}=1$
\end_inset


\begin_inset Marginal
status open

\begin_layout Plain Layout

\emph on
caso base
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
i coefficienti binomiali con (
\begin_inset Formula $n<k$
\end_inset

, 
\begin_inset Formula $n<0$
\end_inset

, 
\begin_inset Formula $k<0$
\end_inset

) non sono validi e si assumono avere valore 
\begin_inset Formula $0$
\end_inset


\begin_inset Marginal
status open

\begin_layout Plain Layout

\emph on
caso base
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
ogni coefficiente è la somma del soprastante e del predecessore di quest'ultimo
 
\begin_inset Marginal
status open

\begin_layout Plain Layout

\emph on
passo indut.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Subsubsection
Soluzione C
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout LyX-Code

\begin_inset Caption Standard

\begin_layout Plain Layout
Coefficiente binomiale
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

int cobin(int n, int k) {
\end_layout

\begin_layout LyX-Code

	if (n < k || n < 0 || k < 0)
\end_layout

\begin_layout LyX-Code

		return 0;
\end_layout

\begin_layout LyX-Code

	if (k == 0 || k == n || n == 0)
\end_layout

\begin_layout LyX-Code

		return 1;
\end_layout

\begin_layout LyX-Code

	return cobin(n - 1, k - 1) + cobin(n - 1, k);
\end_layout

\begin_layout LyX-Code

} 
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Stampa il tringolo
\end_layout

\begin_layout Enumerate
Stampare il triangolo di Tartaglia fino alla riga 
\begin_inset Formula $n$
\end_inset

, con 
\begin_inset Formula $n$
\end_inset

 inserito dall'utente.
\end_layout

\begin_layout Enumerate
Stampare il triangolo di Tartaglia al contrario, partendo dalla riga 
\begin_inset Formula $n$
\end_inset

, con 
\begin_inset Formula $n$
\end_inset

 inserito dall'utente.
\end_layout

\begin_layout Subsubsection
Soluzione C - Stampa del triangolo
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout LyX-Code

\begin_inset Caption Standard

\begin_layout Plain Layout
Triangolo di Tartaglia
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

int cobin(int n, int k) {
\end_layout

\begin_layout LyX-Code

	if (n < k || n < 0 || k < 0)
\end_layout

\begin_layout LyX-Code

		return 0;
\end_layout

\begin_layout LyX-Code

	if (k == 0 || k == n || n == 0)
\end_layout

\begin_layout LyX-Code

		return 1;
\end_layout

\begin_layout LyX-Code

	return cobin(n - 1, k - 1) + cobin(n - 1, k);
\end_layout

\begin_layout LyX-Code

} 
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

void triangoloTartaglia(int maxRiga) {
\end_layout

\begin_layout LyX-Code

	int n, k, c;
\end_layout

\begin_layout LyX-Code

	for (n = 0; n <= maxRiga; ++n) {
\end_layout

\begin_layout LyX-Code

		for (k = 0; k <= n; ++k) {
\end_layout

\begin_layout LyX-Code

			c = cobin(n, k);
\end_layout

\begin_layout LyX-Code

			printf ("%d ", c);
\end_layout

\begin_layout LyX-Code

		}
\end_layout

\begin_layout LyX-Code

		printf ("
\backslash
n");
\end_layout

\begin_layout LyX-Code

	}
\end_layout

\begin_layout LyX-Code

}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

int main() {
\end_layout

\begin_layout LyX-Code

	int r;
\end_layout

\begin_layout LyX-Code

	do {
\end_layout

\begin_layout LyX-Code

		printf ("Triangolo di Tartaglia, fino a riga ");
\end_layout

\begin_layout LyX-Code

		scanf("%d", &r);
\end_layout

\begin_layout LyX-Code

	} while (r < 0);
\end_layout

\begin_layout LyX-Code

	triangoloTartaglia(r);
\end_layout

\begin_layout LyX-Code

	return 0;
\end_layout

\begin_layout LyX-Code

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Subsubsection
Soluzione C - Stampa del triangolo al contrario
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout LyX-Code

\begin_inset Caption Standard

\begin_layout Plain Layout
Triangolo di Tartaglia invertito
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

int cobin(int n, int k) {
\end_layout

\begin_layout LyX-Code

	if (n < k || n < 0 || k < 0)
\end_layout

\begin_layout LyX-Code

		return 0;
\end_layout

\begin_layout LyX-Code

	if (k == 0 || k == n || n == 0)
\end_layout

\begin_layout LyX-Code

		return 1;
\end_layout

\begin_layout LyX-Code

	return cobin(n - 1, k - 1) + cobin(n - 1, k);
\end_layout

\begin_layout LyX-Code

} 
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

void triangoloTartagliaReverse(int maxRiga) {
\end_layout

\begin_layout LyX-Code

	int n, k, c;
\end_layout

\begin_layout LyX-Code

	for (n = 0; n <= maxRiga; ++n) {
\end_layout

\begin_layout LyX-Code

		for (k = n; k >= 0; --k) {
\end_layout

\begin_layout LyX-Code

			c = cobin(n, k);
\end_layout

\begin_layout LyX-Code

			printf ("%d ", c);
\end_layout

\begin_layout LyX-Code

		}
\end_layout

\begin_layout LyX-Code

		printf ("
\backslash
n");
\end_layout

\begin_layout LyX-Code

	}
\end_layout

\begin_layout LyX-Code

}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

int main() {
\end_layout

\begin_layout LyX-Code

	int r;
\end_layout

\begin_layout LyX-Code

	do {
\end_layout

\begin_layout LyX-Code

		printf("Triangolo di Tartaglia invertito, dalla a riga ");
\end_layout

\begin_layout LyX-Code

		scanf("%d", &r);
\end_layout

\begin_layout LyX-Code

	} while (r < 0);
\end_layout

\begin_layout LyX-Code

	triangoloTartagliaReverse(r);
\end_layout

\begin_layout LyX-Code

	return 0;
\end_layout

\begin_layout LyX-Code

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
KITT
\end_layout

\begin_layout Quotation
Negli anni '80 una serie TV americana introduceva uno dei primi concept
 di smart self-driving car con 
\begin_inset Quotes fld
\end_inset

Supercar
\begin_inset Quotes frd
\end_inset

.
 Il display montato sul muso dell'auto era composto da led rossi illuminati
 a diverse intensità.
 Il pattern di illuminazione del display era un segmento in movimento.
 Il segmento aveva maggiore intensità nella sua parte centrale e intensità
 decrescente verso i suoi estremi.
 Lo stesso segmento si spostava sul display avanti e indietro lungo la direzione
 orizzontale.
\end_layout

\begin_layout Quotation
Si consideri di avere a disposizione un display simile.
 Per comandare l'illuminazione del display, esso riceve in input un vettore
 di N elementi interi.
 Ogni elemento del vettore rappresenta l'intensità di illuminazione di un
 elemento del display.
 Ogni elemento del display può illuminarsi a L livelli di intensità (da
 0 a L-1).
\end_layout

\begin_layout Quotation
Esempio di configurazione del vettore all'istante di tempo 
\begin_inset Formula $t_{x}$
\end_inset

.
\end_layout

\begin_layout LyX-Code
t0: 1 2 3 2 1 0 0
\end_layout

\begin_layout LyX-Code
t1: 0 1 2 3 2 1 0
\end_layout

\begin_layout LyX-Code
t2: 0 0 1 2 3 2 1
\end_layout

\begin_layout LyX-Code
t3: 0 0 0 1 2 3 2
\end_layout

\begin_layout LyX-Code
t4: 0 0 0 0 1 2 3
\end_layout

\begin_layout LyX-Code
t5: 0 0 0 1 2 3 2
\end_layout

\begin_layout LyX-Code
t6: 0 0 1 2 3 2 1
\end_layout

\begin_layout LyX-Code
t7: 0 1 2 3 2 1 0
\end_layout

\begin_layout LyX-Code
t8: 1 2 3 2 1 0 0
\end_layout

\begin_layout Quotation
Si scriva una funzione C ricorsiva che permetta di riempire il vettore display
 per ogni istante di tempo 
\begin_inset Formula $t_{x}$
\end_inset

.
 Si consiglia di utilizzare le seguenti funzioni per eseguire una più efficace
 implementazione:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout LyX-Code

#include <stdio.h>
\end_layout

\begin_layout LyX-Code

#include <unistd.h>  // sleep()
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

#define N 15
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

sleep(1); // stop the program for 1 second
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

void print(int v[]) {
\end_layout

\begin_layout LyX-Code

  // print backspace: erase display
\end_layout

\begin_layout LyX-Code

  for (int i = 0; i < N; i++) printf("
\backslash
b
\backslash
b
\backslash
b");
\end_layout

\begin_layout LyX-Code

  // print vector
\end_layout

\begin_layout LyX-Code

  for (int i = 0; i < N; i++) printf("%d ", v[i]);
\end_layout

\begin_layout LyX-Code

  // flush the buffer
\end_layout

\begin_layout LyX-Code

  fflush(stdout);
\end_layout

\begin_layout LyX-Code

  return;
\end_layout

\begin_layout LyX-Code

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Subsection
Approccio alla soluzione
\end_layout

\begin_layout Subsubsection
Dividi et impera
\end_layout

\begin_layout Standard
Il problema dato all'apparenza ha una complessità notevole.
 Ad una attenta anilisi si possono però riconoscere alcuni sottoproblemi
 più semplici che possono essere affrontati più facilmente.
 Scrivere una funzione C o anche solo un frammento di codice che risolva
 un sottoproblema sarà sicuramente di aiuto nella stesura della soluzione
 finale.
\end_layout

\begin_layout Subsubsection
Disegna un segmento
\end_layout

\begin_layout Standard
Tra le altre cose, viene richiesto di disegnare un segmento in un vettore
 secondo un determinato pattern.
 Il pattern richiesto prevede una sequenza di numeri crescente seguita da
 una sequenza di numeri decrescente.
\end_layout

\begin_layout Standard
Esempio:
\end_layout

\begin_layout LyX-Code
1 2 3 2 1
\end_layout

\begin_layout Paragraph
Una soluzione di getto...
\end_layout

\begin_layout Standard
Un frammento di codice che produce questa soluzione è il seguente:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout LyX-Code

#define L 4
\end_layout

\begin_layout LyX-Code

#define N 5
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

int i, k;
\end_layout

\begin_layout LyX-Code

int v[N] = {0};
\end_layout

\begin_layout LyX-Code

i = 0;
\end_layout

\begin_layout LyX-Code

k = 1;
\end_layout

\begin_layout LyX-Code

while (k < L) {
\end_layout

\begin_layout LyX-Code

  v[i] = k;
\end_layout

\begin_layout LyX-Code

  i++;
\end_layout

\begin_layout LyX-Code

  k++;
\end_layout

\begin_layout LyX-Code

}
\end_layout

\begin_layout LyX-Code

k -= 2;
\end_layout

\begin_layout LyX-Code

while (k > 0) {
\end_layout

\begin_layout LyX-Code

  v[i] = k;
\end_layout

\begin_layout LyX-Code

  k--;
\end_layout

\begin_layout LyX-Code

  i++;
\end_layout

\begin_layout LyX-Code

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Paragraph
Facciamolo ricorsivo
\end_layout

\begin_layout Standard
Il frammento di codice riportato qui sopra ha però un problema.
 Esso è scritto in forma iterativa.
 Il testo dell'esercizio esplicitamente chiedeva che venisse scritto in
 forma ricorsiva.
\end_layout

\begin_layout Standard
Riadattiamo quindi l'algoritmo in forma ricorsiva.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout LyX-Code

#define L 4
\end_layout

\begin_layout LyX-Code

#define N 5
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

void fill_wrapper(int v[]) {
\end_layout

\begin_layout LyX-Code

  fill_up(v, 0, 1);
\end_layout

\begin_layout LyX-Code

  return;
\end_layout

\begin_layout LyX-Code

}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

void fill_up(int v[], int i, int k) {
\end_layout

\begin_layout LyX-Code

  if (k >= L) return fill_down(v, i+1, k-1);
\end_layout

\begin_layout LyX-Code

  v[i] = k;
\end_layout

\begin_layout LyX-Code

  fill_up(v, i+1, k+1);
\end_layout

\begin_layout LyX-Code

}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

void fill_down(int v[], int i, int k) {
\end_layout

\begin_layout LyX-Code

  if (k <= 0) return;
\end_layout

\begin_layout LyX-Code

  v[i] = k;
\end_layout

\begin_layout LyX-Code

  fill_down(v, i+1, k-1);
\end_layout

\begin_layout LyX-Code

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Si noti come in questo specifico caso le condizioni di terminazione dei
 cicli sono diventate casi base per terminare la ricorsione.
 La semantica è preservata.
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Paragraph
Ottimizziamo
\end_layout

\begin_layout Standard
Con l'aggiunta si un caso base nella ricorsione è possibile gestire anche
 la situazione di segmento più lungo del vettore.
\end_layout

\begin_layout Standard
Si noti che le due funzioni fill_up e fill_down sono molto simili tra di
 loro.
 Si propone di seguito una soluzione che le fonde assieme in una unica funzione
 con l'aggiunta di un parametro flag.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout LyX-Code

#define L 4
\end_layout

\begin_layout LyX-Code

#define N 5
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

void fill_wrapper(int v[]) {
\end_layout

\begin_layout LyX-Code

  fill(v, 0, 1, 1);
\end_layout

\begin_layout LyX-Code

  return;
\end_layout

\begin_layout LyX-Code

}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

void fill(int v[], int i, int k, int direction) {
\end_layout

\begin_layout LyX-Code

  if (i >= N) // end of vector
\end_layout

\begin_layout LyX-Code

    return;
\end_layout

\begin_layout LyX-Code

  if (k >= L) // change direction
\end_layout

\begin_layout LyX-Code

    return fill(v, i+1, k-1, !direction);
\end_layout

\begin_layout LyX-Code

  v[i] = k;
\end_layout

\begin_layout LyX-Code

  // continue in the same direction
\end_layout

\begin_layout LyX-Code

  if (direction)
\end_layout

\begin_layout LyX-Code

    fill(v, i+1, k+1, direction);
\end_layout

\begin_layout LyX-Code

  else
\end_layout

\begin_layout LyX-Code

    fill (v, i+1, k-1, direction);
\end_layout

\begin_layout LyX-Code

  return;
\end_layout

\begin_layout LyX-Code

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Subsubsection
Spostare un segmento
\end_layout

\begin_layout Standard
Il problema chiede di spostare il segmento avanti e indietro nel vettore.
\end_layout

\begin_layout Standard
Per fare ciò è sufficiente cambiare l'indice che stabilsce l'inizio del
 segmento.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout LyX-Code

int start;
\end_layout

\begin_layout LyX-Code

for (start = 0; start < N; start ++) {
\end_layout

\begin_layout LyX-Code

  // initialize v to all 0
\end_layout

\begin_layout LyX-Code

  // ...
\end_layout

\begin_layout LyX-Code

  fill(v, start, 1, 1); // move ahead
\end_layout

\begin_layout LyX-Code

}
\end_layout

\begin_layout LyX-Code

for (start = N-2; start > 0; start --) {
\end_layout

\begin_layout LyX-Code

  // initialize v to all 0
\end_layout

\begin_layout LyX-Code

  // ...
\end_layout

\begin_layout LyX-Code

  fill(v, start, 1, 1); // move backward
\end_layout

\begin_layout LyX-Code

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Sarà sufficiente riadattare il codice scritto in precedenza per disegnare
 un segmento alla struttura qui illustrata per ottenere l'effetto desiderato.
\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Subsubsection
Inserire una stampa a video
\end_layout

\begin_layout Standard
Si utilizzi la stampa a video fornita nel testo del problema.
 In quali punti è opportuno mostrare l'output? Al termine di ogni iterazione
 si avrà un risultato diverso.
 Si consiglia pertanto di osservare l'output di ogni iterazione.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout LyX-Code

int start;
\end_layout

\begin_layout LyX-Code

for (start = 0; start < N; start ++) {
\end_layout

\begin_layout LyX-Code

  // initialize v to all 0
\end_layout

\begin_layout LyX-Code

  // ...
\end_layout

\begin_layout LyX-Code

  fill(v, start, 1, 1); // move ahead
\end_layout

\begin_layout LyX-Code

  print(v);
\end_layout

\begin_layout LyX-Code

}
\end_layout

\begin_layout LyX-Code

for (start = N-2; start > 0; start --) {
\end_layout

\begin_layout LyX-Code

  // initialize v to all 0
\end_layout

\begin_layout LyX-Code

  // ...
\end_layout

\begin_layout LyX-Code

  fill(v, start, 1, 1); // move backward
\end_layout

\begin_layout LyX-Code

  print(v);
\end_layout

\begin_layout LyX-Code

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Chi è più veloce: l'occhio o il computer?
\end_layout

\begin_layout Standard
Per ovvi motivi di velocità di esecuzione del computer, le iterazioni saranno
 sovrascritte con una velocità superiore alla umana possibilità di osservare
 l'output.
 Esiste però il modo di costringere il programma a fermarsi per un intervallo
 di tempo sufficiente a permettere l'osservazione del risultato.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout LyX-Code

int start;
\end_layout

\begin_layout LyX-Code

for (start = 0; start < N; start ++) {
\end_layout

\begin_layout LyX-Code

  // initialize v to all 0
\end_layout

\begin_layout LyX-Code

  // ...
\end_layout

\begin_layout LyX-Code

  fill(v, start, 1, 1); // move ahead
\end_layout

\begin_layout LyX-Code

  sleep(1);
\end_layout

\begin_layout LyX-Code

}
\end_layout

\begin_layout LyX-Code

for (start = N-2; start > 0; start --) {
\end_layout

\begin_layout LyX-Code

  // initialize v to all 0
\end_layout

\begin_layout LyX-Code

  // ...
\end_layout

\begin_layout LyX-Code

  fill(v, start, 1, 1); // move backward
\end_layout

\begin_layout LyX-Code

  sleep(1);
\end_layout

\begin_layout LyX-Code

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Subsection
Soluzione C
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout LyX-Code

\begin_inset Caption Standard

\begin_layout Plain Layout
KITT
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

#include <stdio.h>
\end_layout

\begin_layout LyX-Code

#include <unistd.h>  // sleep()
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

#define N 15
\end_layout

\begin_layout LyX-Code

#define L 5
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

void print(int v[]);
\end_layout

\begin_layout LyX-Code

void fill(int v[], int start, int val, int raising);
\end_layout

\begin_layout LyX-Code

void fill_wrap(int v[], int start);
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

int main(int argc, char*argv[]) {
\end_layout

\begin_layout LyX-Code

  int display[N] = {0};
\end_layout

\begin_layout LyX-Code

  for (int i = 0; i < N; i++) {
\end_layout

\begin_layout LyX-Code

    fill_wrap(display, i);
\end_layout

\begin_layout LyX-Code

    print(display);
\end_layout

\begin_layout LyX-Code

    sleep(1); // stop the program for 1 second
\end_layout

\begin_layout LyX-Code

  }
\end_layout

\begin_layout LyX-Code

  for (int i = N-2; i > 0; i--) {
\end_layout

\begin_layout LyX-Code

    fill_wrap(display, i);
\end_layout

\begin_layout LyX-Code

    print(display);
\end_layout

\begin_layout LyX-Code

    sleep(1); // stop the program for 1 second
\end_layout

\begin_layout LyX-Code

  }
\end_layout

\begin_layout LyX-Code

  return 0;
\end_layout

\begin_layout LyX-Code

}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

void fill_wrap(int v[], int start) {
\end_layout

\begin_layout LyX-Code

  for (int i = 0; i < N; i++)
\end_layout

\begin_layout LyX-Code

    v[i] = 0;  // initialize to 0 every time
\end_layout

\begin_layout LyX-Code

  fill(v, start, 1, 1);
\end_layout

\begin_layout LyX-Code

  return;
\end_layout

\begin_layout LyX-Code

}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

void fill(int v[], int start, int val, int raising) {
\end_layout

\begin_layout LyX-Code

  if (start >= N) return;           // end of vector
\end_layout

\begin_layout LyX-Code

  if (!raising && val <= 0) return; // end of segment
\end_layout

\begin_layout LyX-Code

  if (val >= L) // change direction
\end_layout

\begin_layout LyX-Code

    return fill(v, start+1, val-1, !raising);
\end_layout

\begin_layout LyX-Code

  v[start] = val;
\end_layout

\begin_layout LyX-Code

  if (raising) fill(v, start+1, val+1, raising);
\end_layout

\begin_layout LyX-Code

  else fill(v, start+1, val-1, raising);
\end_layout

\begin_layout LyX-Code

  return;
\end_layout

\begin_layout LyX-Code

}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

void print(int v[]) {
\end_layout

\begin_layout LyX-Code

  // print backspace: erase display
\end_layout

\begin_layout LyX-Code

  for (int i = 0; i < N; i++) printf("
\backslash
b
\backslash
b
\backslash
b");
\end_layout

\begin_layout LyX-Code

  // print vector
\end_layout

\begin_layout LyX-Code

  for (int i = 0; i < N; i++) printf("%d ", v[i]);
\end_layout

\begin_layout LyX-Code

  // flush the buffer
\end_layout

\begin_layout LyX-Code

  fflush(stdout);
\end_layout

\begin_layout LyX-Code

  return;
\end_layout

\begin_layout LyX-Code

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section*
Licenza e crediti
\end_layout

\begin_layout Subsection*
Crediti
\end_layout

\begin_layout Standard
Quest'opera contiene elementi tratti da materiale di Gerardo Pelosi redatto
 per il corso di Fondamenti di Informatica per Ingegneria dell'Automazione
 a.a.
 2014/15.
\end_layout

\begin_layout Subsection*
Licenza beerware
\begin_inset Foot
status open

\begin_layout Plain Layout
http://people.freebsd.org/~phk/
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Quest'opera è stata redatta da Stefano Cherubin.
 Mantenendo questa nota, puoi fare quello che vuoi con quest'opera.
 Se ci dovessimo incontrare e tu ritenessi che quest'opera lo valga, in
 cambio puoi offrirmi una birra.
\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\end_body
\end_document
