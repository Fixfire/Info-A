#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter tgcursor
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language french
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Esercizi su funzioni ricorsive in C
\end_layout

\begin_layout Author
Stefano Cherubin
\begin_inset Foot
status open

\begin_layout Plain Layout
<nome.cognome>@polimi.it
\end_layout

\end_inset


\end_layout

\begin_layout Date
04/12/2015
\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Address
[
\series bold
Informatica A
\series default
] Esercitazione #12
\end_layout

\begin_layout Standard
\begin_inset VSpace 5theight%
\end_inset


\end_layout

\begin_layout Right Address
corso per Ing.
 Gestionale a.a.
 2015/16
\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Ricerca binaria
\end_layout

\begin_layout Quotation
Si consideri già disponibile il seguente frammento di codice
\end_layout

\begin_layout Quotation
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout LyX-Code

#include <stdio.h> 
\end_layout

\begin_layout LyX-Code

#define MAXLEN 15
\end_layout

\begin_layout LyX-Code

void loadVector(int v[], int *n) {
\end_layout

\begin_layout LyX-Code

	int i;
\end_layout

\begin_layout LyX-Code

	do {
\end_layout

\begin_layout LyX-Code

		printf("
\backslash
nQuanti elementi nel vettore? (0 - %d):", MAXLEN);
\end_layout

\begin_layout LyX-Code

		scanf("%d", n); /*scanf("%d, &*n")*/
\end_layout

\begin_layout LyX-Code

	} while (*n < 0 || *n > MAXLEN);
\end_layout

\begin_layout LyX-Code

	printf("
\backslash
nInserisci %d elementi del vettore, separa con spazi ", *n);
\end_layout

\begin_layout LyX-Code

	for (i = 0; i < *n; ++i) {
\end_layout

\begin_layout LyX-Code

		scanf("%d", &v[i]);
\end_layout

\begin_layout LyX-Code

	}
\end_layout

\begin_layout LyX-Code

}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

void sortVector(int v[], int n) {
\end_layout

\begin_layout LyX-Code

	int i, j, tmp;
\end_layout

\begin_layout LyX-Code

	for (i = 0; i < n - 1; i++) {
\end_layout

\begin_layout LyX-Code

		for (j = i; j < n; j++) {
\end_layout

\begin_layout LyX-Code

			if (v[i] > v[j]) {
\end_layout

\begin_layout LyX-Code

				tmp = v[i];
\end_layout

\begin_layout LyX-Code

				v[i] = v[j];
\end_layout

\begin_layout LyX-Code

				v[j] = tmp;
\end_layout

\begin_layout LyX-Code

			}
\end_layout

\begin_layout LyX-Code

		}
\end_layout

\begin_layout LyX-Code

	}
\end_layout

\begin_layout LyX-Code

}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Scrivere una funzione ricorsiva che esegua la ricerca di un elemento all'interno
 del vettore secondo l'algoritmo di ricerca binaria (aka ricerca dicotomica).
\end_layout

\begin_layout Enumerate
Scrivere un programma che acquisisca in input un vettore di numeri interi
 e una chiave di ricerca (anch'essa come numero intero) e attraverso la
 funzione di ricerca scritta al punto precedente stabilisca se l'elemento
 chiave è contenuto nel vettore oppure no.
\end_layout

\begin_layout Enumerate
Se necessario, modifcare il codice finora scritto per fare in modo che la
 funzione di ricerca abbia il seguente prototipo 
\begin_inset listings
lstparams "language=C,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline true
status open

\begin_layout Plain Layout

int binarySearch(int key, int v[], int n);
\end_layout

\end_inset

 .
\end_layout

\begin_layout Enumerate
Scrivere la funzione di ricerca binaria in versione iterativa (senza l'utilizzo
 di ricorsione).
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Subsection
Soluzione
\end_layout

\begin_layout Subsubsection
Ricerca binaria (ricorsiva)
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout LyX-Code

\begin_inset Caption Standard

\begin_layout Plain Layout
Ricerca binaria ricorsiva
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

int binarySearch(int key, int v[], int start, int end) {
\end_layout

\begin_layout LyX-Code

	int middle = (end + start) / 2;
\end_layout

\begin_layout LyX-Code

	if (start > end) {
\end_layout

\begin_layout LyX-Code

		return -1;
\end_layout

\begin_layout LyX-Code

	}
\end_layout

\begin_layout LyX-Code

	if (v[middle] == key) {
\end_layout

\begin_layout LyX-Code

		return middle;
\end_layout

\begin_layout LyX-Code

	}
\end_layout

\begin_layout LyX-Code

	if (key > v[middle]) {
\end_layout

\begin_layout LyX-Code

		return binarySearch(key, v, middle+1, end);
\end_layout

\begin_layout LyX-Code

	}
\end_layout

\begin_layout LyX-Code

	return binarySearch(key, v, start, middle-1); 
\end_layout

\begin_layout LyX-Code

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Programma
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout LyX-Code

\begin_inset Caption Standard

\begin_layout Plain Layout
Programma per la ricerca
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

int main() {
\end_layout

\begin_layout LyX-Code

	int v[MAXLEN];
\end_layout

\begin_layout LyX-Code

	int n, key, ret;
\end_layout

\begin_layout LyX-Code

	loadVector(v, &n);
\end_layout

\begin_layout LyX-Code

	sortVector(v, n);
\end_layout

\begin_layout LyX-Code

	printf("
\backslash
nInsert an element as search key:");
\end_layout

\begin_layout LyX-Code

	scanf("%d", &key);
\end_layout

\begin_layout LyX-Code

	ret = binarySearch(key, v, 0, n);
\end_layout

\begin_layout LyX-Code

	if (ret == -1)
\end_layout

\begin_layout LyX-Code

		printf("
\backslash
nElemento NON trovato.");
\end_layout

\begin_layout LyX-Code

	else
\end_layout

\begin_layout LyX-Code

		printf("
\backslash
nElemento trovato.");
\end_layout

\begin_layout LyX-Code

	return 0;
\end_layout

\begin_layout LyX-Code

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Subsubsection
Programma e funzione (modificati)
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout LyX-Code

\begin_inset Caption Standard

\begin_layout Plain Layout
Ricerca binaria (con wrapper)
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

/* La medesima funzione di prima, rinominata */
\end_layout

\begin_layout LyX-Code

int _binarySearch(int key, int v[], int start, int end) {
\end_layout

\begin_layout LyX-Code

	int middle = (end + start) / 2;
\end_layout

\begin_layout LyX-Code

	if (start > end) {
\end_layout

\begin_layout LyX-Code

		return -1;
\end_layout

\begin_layout LyX-Code

	}
\end_layout

\begin_layout LyX-Code

	if (v[middle] == key) {
\end_layout

\begin_layout LyX-Code

		return middle;
\end_layout

\begin_layout LyX-Code

	}
\end_layout

\begin_layout LyX-Code

	if (key > v[middle]) {
\end_layout

\begin_layout LyX-Code

		return _binarySearch(key, v, middle + 1, end);
\end_layout

\begin_layout LyX-Code

	}
\end_layout

\begin_layout LyX-Code

	return _binarySearch(key, v, start, middle - 1);
\end_layout

\begin_layout LyX-Code

}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

/* Funzione "wrapper" che si occupa solo di eseguire l'inizializzazione
 del parametro mancante per la funzione _binarySearch */
\end_layout

\begin_layout LyX-Code

int binarySearch(int key, int v[], int n) {
\end_layout

\begin_layout LyX-Code

	return _binarySearch(key, v, 0, n); 
\end_layout

\begin_layout LyX-Code

} 
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

int main() {
\end_layout

\begin_layout LyX-Code

	int v[MAXLEN];
\end_layout

\begin_layout LyX-Code

	int n, key, ret;
\end_layout

\begin_layout LyX-Code

	loadVector(v, &n);
\end_layout

\begin_layout LyX-Code

	sortVector(v, n);
\end_layout

\begin_layout LyX-Code

	printf("
\backslash
nInserisci una chiave da cercare:");
\end_layout

\begin_layout LyX-Code

	scanf("%d", &key);
\end_layout

\begin_layout LyX-Code

	ret = binarySearch(key, v, n);
\end_layout

\begin_layout LyX-Code

	if (ret == -1)
\end_layout

\begin_layout LyX-Code

		printf("
\backslash
nElemento NON trovato.");
\end_layout

\begin_layout LyX-Code

	else
\end_layout

\begin_layout LyX-Code

		printf("
\backslash
nElemento trovato.");
\end_layout

\begin_layout LyX-Code

	return 0;
\end_layout

\begin_layout LyX-Code

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Subsubsection
Versione iterativa
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout LyX-Code

\begin_inset Caption Standard

\begin_layout Plain Layout
Ricerca binaria iterativa
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

int binarySearchIter(int key, int v[], int n) {
\end_layout

\begin_layout LyX-Code

	int start, end, middle;
\end_layout

\begin_layout LyX-Code

	start = 0;
\end_layout

\begin_layout LyX-Code

	end = n;
\end_layout

\begin_layout LyX-Code

	while (start < end) {
\end_layout

\begin_layout LyX-Code

		middle = (start + end) / 2;
\end_layout

\begin_layout LyX-Code

		if (v[middle] == key) {
\end_layout

\begin_layout LyX-Code

			return middle;
\end_layout

\begin_layout LyX-Code

		}
\end_layout

\begin_layout LyX-Code

		if (key < v[middle]) {
\end_layout

\begin_layout LyX-Code

			end = middle - 1;
\end_layout

\begin_layout LyX-Code

		} else {
\end_layout

\begin_layout LyX-Code

			start = middle + 1;
\end_layout

\begin_layout LyX-Code

		}
\end_layout

\begin_layout LyX-Code

	}
\end_layout

\begin_layout LyX-Code

	return -1;
\end_layout

\begin_layout LyX-Code

} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Triangolo di Tartaglia
\end_layout

\begin_layout Subsection
Coefficienti Binomiali
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO
\end_layout

\begin_layout Plain Layout
calcola ricorsivamente il coefficiente binomiale secondo la regola del triangolo
 di tartaglia
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Subsection
Stampa il tringolo
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO
\end_layout

\begin_layout Plain Layout
Stampa il triangolo di tartaglia fino alla riga N
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Stampa il tringolo al contrario
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO
\end_layout

\begin_layout Plain Layout
Stampa il triangolo di tartaglia dalla riga N
\end_layout

\end_inset


\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section*
Licenza e crediti
\end_layout

\begin_layout Subsection*
Crediti
\end_layout

\begin_layout Standard
Quest'opera contiene elementi tratti da materiale di Gerardo Pelosi redatto
 per il corso di Fondamenti di Informatica per Ingegneria dell'Automazione
 a.a.
 2014/15.
\end_layout

\begin_layout Subsection*
Licenza beerware
\begin_inset Foot
status open

\begin_layout Plain Layout
http://people.freebsd.org/~phk/
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Quest'opera è stata redatta da Stefano Cherubin.
 Mantenendo questa nota, puoi fare quello che vuoi con quest'opera.
 Se ci dovessimo incontrare e tu ritenessi che quest'opera lo valga, in
 cambio puoi offrirmi una birra.
\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\end_body
\end_document
