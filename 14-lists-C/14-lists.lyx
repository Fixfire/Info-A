#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\IfFileExists{lmodern.sty}{\usepackage{lmodern}}{}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "tgcursor" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language french
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Esercizi su liste in C
\end_layout

\begin_layout Author
Stefano Cherubin
\begin_inset Foot
status open

\begin_layout Plain Layout
<nome>.<cognome>@polimi.it
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Graphics
	filename square_framed.pdf
	width 3.5cm

\end_inset


\end_layout

\begin_layout Date
21/12/2017
\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Address
[
\series bold
Informatica A
\series default
] Esercitazione #14
\end_layout

\begin_layout Standard
\begin_inset VSpace 5theight%
\end_inset


\end_layout

\begin_layout Right Address
corso per Ing.
 Gestionale a.a.
 2017/18
\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Esercizi-di-riscaldamento"

\end_inset

Esercizi di riscaldamento
\end_layout

\begin_layout Quotation
Sia data la seguente definizione di tipo
\end_layout

\begin_layout Quotation
\begin_inset listings
lstparams "language=C,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout Plain Layout

typedef struct list_elem_s {
\end_layout

\begin_layout Plain Layout

	int value;
\end_layout

\begin_layout Plain Layout

	struct list_elem_s* next;
\end_layout

\begin_layout Plain Layout

} list_elem_t; 
\end_layout

\end_inset


\end_layout

\begin_layout Quotation
Si definiscano le seguenti procedure in linguaggio C.
\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset listings
lstparams "language=C,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline true
status open

\begin_layout Plain Layout

void displayOdd(list_elem_t* list)
\end_layout

\end_inset

 
\end_layout

\begin_deeper
\begin_layout Itemize
visualizza su standard output i soli elementi della lista che occupano posto
 di posizione dispari (si consideri la testa della lista come posizione
 0, quindi pari)
\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset listings
lstparams "language=C,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline true
status open

\begin_layout Plain Layout

void displayEven(list_elem_t* list)
\end_layout

\end_inset

 
\end_layout

\begin_deeper
\begin_layout Itemize
visualizza su standard output i soli elementi della lista che occupano posto
 di posizione pari (si consideri la testa della lista come posizione 0,
 quindi pari).
 Si fornisca una versione ricorsiva di questa procedura.
\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset listings
lstparams "language=C,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline true
status open

\begin_layout Plain Layout

void dump(list_elem_t* list, const char* filename)
\end_layout

\end_inset

 
\end_layout

\begin_deeper
\begin_layout Itemize
esegue il dump (copia tutto il contenuto) della lista in un file di testo
 il cui nome è passato come parametro.
\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Subsection
Soluzione C - displayOdd
\end_layout

\begin_layout Standard
Di seguito si presentano due equivalenti versioni.
 La prima analizza due elementi della lista per ogni iterazione, l'altra
 conserva un contatore con l'indice della posizione e controlla la parità
 dell'indice ad ogni iterazione.
\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout LyX-Code

\begin_inset Caption Standard

\begin_layout Plain Layout
displayOdd
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

void displayOdd(list_elem_t* list) {
\end_layout

\begin_layout LyX-Code

	/* while (list != NULL) */
\end_layout

\begin_layout LyX-Code

	while (list) {
\end_layout

\begin_layout LyX-Code

		/* salta il primo perché pari */
\end_layout

\begin_layout LyX-Code

		list = list->next;
\end_layout

\begin_layout LyX-Code

		if (list) {
\end_layout

\begin_layout LyX-Code

			printf("%d->", list->value);
\end_layout

\begin_layout LyX-Code

			list = list->next;
\end_layout

\begin_layout LyX-Code

		}
\end_layout

\begin_layout LyX-Code

	}
\end_layout

\begin_layout LyX-Code

	printf("||
\backslash
n");
\end_layout

\begin_layout LyX-Code

	return;
\end_layout

\begin_layout LyX-Code

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout LyX-Code

\begin_inset Caption Standard

\begin_layout Plain Layout
displayOdd - variante con contatore
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

void displayOddCount(list_elem_t* list) {
\end_layout

\begin_layout LyX-Code

	int i = 0;
\end_layout

\begin_layout LyX-Code

	/* while (list != NULL) */
\end_layout

\begin_layout LyX-Code

	while (list) {
\end_layout

\begin_layout LyX-Code

		/* if (i % 2 != 0) */
\end_layout

\begin_layout LyX-Code

		if (i % 2) {
\end_layout

\begin_layout LyX-Code

			printf("%d->", list->value);
\end_layout

\begin_layout LyX-Code

		}
\end_layout

\begin_layout LyX-Code

		list = list->next;
\end_layout

\begin_layout LyX-Code

		++i;
\end_layout

\begin_layout LyX-Code

	}
\end_layout

\begin_layout LyX-Code

	printf("||
\backslash
n");
\end_layout

\begin_layout LyX-Code

	return;
\end_layout

\begin_layout LyX-Code

} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Subsection
Soluzione C - displayEven
\end_layout

\begin_layout Standard
Di seguito si presenta una versione che fa uso di due procedure chiamate
 ricorsivamente in catena.
 La prima si occupa di numeri dispari, la seconda di numeri.
 Solo la seconda contiene l'output su standard output.
\end_layout

\begin_layout Standard
Considerato che le due funzioni si chiamano ricorsivamente l'un l'altra,
 è fondamentale che i prototipi delle stesse vengano anteposti.
\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout LyX-Code

\begin_inset Caption Standard

\begin_layout Plain Layout
displayEven
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

void displayOddRec(list_elem_t* list);
\end_layout

\begin_layout LyX-Code

void displayEvenRec(list_elem_t* list);
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

void displayOddRec(list_elem_t* list) {
\end_layout

\begin_layout LyX-Code

	if (list) {
\end_layout

\begin_layout LyX-Code

		list = list->next;
\end_layout

\begin_layout LyX-Code

		displayEvenRec(list);
\end_layout

\begin_layout LyX-Code

	}
\end_layout

\begin_layout LyX-Code

	return;
\end_layout

\begin_layout LyX-Code

}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

void displayEvenRec(list_elem_t* list) {
\end_layout

\begin_layout LyX-Code

	if (list) {
\end_layout

\begin_layout LyX-Code

		printf("%d->", list->value);
\end_layout

\begin_layout LyX-Code

		list = list->next;
\end_layout

\begin_layout LyX-Code

		displayOddRec(list);
\end_layout

\begin_layout LyX-Code

	}
\end_layout

\begin_layout LyX-Code

	return;
\end_layout

\begin_layout LyX-Code

} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Subsection
Soluzione C - dump
\end_layout

\begin_layout Standard
La soluzione consta in uno scorrimento della lista, accoppiato con la scrittura
 del file.
\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout LyX-Code

\begin_inset Caption Standard

\begin_layout Plain Layout
dump
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

void dump(list_elem_t* list, const char* filename) {
\end_layout

\begin_layout LyX-Code

	FILE* f;
\end_layout

\begin_layout LyX-Code

	f = fopen(filename, "w");
\end_layout

\begin_layout LyX-Code

	if (f) {
\end_layout

\begin_layout LyX-Code

		while (list) {
\end_layout

\begin_layout LyX-Code

			fprintf(f, "%d
\backslash
n", list->value);
\end_layout

\begin_layout LyX-Code

			list = list->next;
\end_layout

\begin_layout LyX-Code

		}
\end_layout

\begin_layout LyX-Code

		fclose(f);
\end_layout

\begin_layout LyX-Code

	}
\end_layout

\begin_layout LyX-Code

	return;
\end_layout

\begin_layout LyX-Code

} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
ADT
\end_layout

\begin_layout Standard
Si implementino facendo uso di liste semplici concatenate i seguenti tipi
 di dato astratto
\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Enumerate
Stack (pila)
\end_layout

\begin_deeper
\begin_layout Itemize
La cancellazione (pop) può avvenire solo sull'ultimo elemento
\end_layout

\begin_layout Itemize
L'inserimento (push) può avvenire solo dopo l'ultimo elemento
\end_layout

\begin_layout Itemize
L'accesso (top) può avvenire solo sull'ultimo elemento
\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Queue (coda)
\end_layout

\begin_deeper
\begin_layout Itemize
L'inserimento (push) può avvenire solo dopo l'ultimo elemento
\end_layout

\begin_layout Itemize
La cancellazione (pop) può avvenire solo sul primo elemento
\end_layout

\begin_layout Itemize
L'accesso (top) può avvenire solo sul primo elemento
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
Si faccia uso del tipo 
\begin_inset listings
lstparams "language=C,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline true
status open

\begin_layout Plain Layout

list_elem_t* 
\end_layout

\end_inset

 utilizzato nell'esercizio 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Esercizi-di-riscaldamento"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Subsection
Soluzione C - stack
\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout LyX-Code

\begin_inset Caption Standard

\begin_layout Plain Layout
stack
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

list_elem_t* stack_pop(list_elem_t* list) {
\end_layout

\begin_layout LyX-Code

	list_elem_t* tmp;
\end_layout

\begin_layout LyX-Code

	tmp = list;
\end_layout

\begin_layout LyX-Code

	if (list) {
\end_layout

\begin_layout LyX-Code

		list = list->next;
\end_layout

\begin_layout LyX-Code

		free(tmp);
\end_layout

\begin_layout LyX-Code

	}
\end_layout

\begin_layout LyX-Code

	return list;
\end_layout

\begin_layout LyX-Code

}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

list_elem_t* stack_push(list_elem_t* list, list_elem_t* elem) {
\end_layout

\begin_layout LyX-Code

	if (elem) {
\end_layout

\begin_layout LyX-Code

		elem->next = list;
\end_layout

\begin_layout LyX-Code

	}
\end_layout

\begin_layout LyX-Code

	return elem;
\end_layout

\begin_layout LyX-Code

}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

list_elem_t* stack_top(list_elem_t* list) {
\end_layout

\begin_layout LyX-Code

	return list;
\end_layout

\begin_layout LyX-Code

}  
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Subsection
Soluzione C - queue
\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout LyX-Code

\begin_inset Caption Standard

\begin_layout Plain Layout
queue
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

list_elem_t* queue_pop(list_elem_t* list) {
\end_layout

\begin_layout LyX-Code

	list_elem_t* tmp;
\end_layout

\begin_layout LyX-Code

	tmp = list;
\end_layout

\begin_layout LyX-Code

	if (list) {
\end_layout

\begin_layout LyX-Code

		list = list->next;
\end_layout

\begin_layout LyX-Code

		free(tmp);
\end_layout

\begin_layout LyX-Code

	}
\end_layout

\begin_layout LyX-Code

	return list;
\end_layout

\begin_layout LyX-Code

}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

list_elem_t* queue_push(list_elem_t* list, list_elem_t* elem) {
\end_layout

\begin_layout LyX-Code

	elem->next = NULL;
\end_layout

\begin_layout LyX-Code

	if (!list) {
\end_layout

\begin_layout LyX-Code

		return elem;
\end_layout

\begin_layout LyX-Code

	}
\end_layout

\begin_layout LyX-Code

	list_elem_t* tmp = list;
\end_layout

\begin_layout LyX-Code

	while (tmp->next) {
\end_layout

\begin_layout LyX-Code

		tmp = tmp->next;
\end_layout

\begin_layout LyX-Code

	}
\end_layout

\begin_layout LyX-Code

	tmp->next = elem;
\end_layout

\begin_layout LyX-Code

	return list;
\end_layout

\begin_layout LyX-Code

}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

list_elem_t* queue_top(list_elem_t* list) {
\end_layout

\begin_layout LyX-Code

	return list;
\end_layout

\begin_layout LyX-Code

}   
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
HTML, quando voi nasceste
\end_layout

\begin_layout Quotation
Si considerino le strutture dati definiti come segue
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout LyX-Code

#define TITLE_LEN 15 
\end_layout

\begin_layout LyX-Code

#define BODY_LEN 15
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

typedef struct date_s {
\end_layout

\begin_layout LyX-Code

	int dd;
\end_layout

\begin_layout LyX-Code

	int mm;
\end_layout

\begin_layout LyX-Code

	int yyyy;
\end_layout

\begin_layout LyX-Code

} date_t;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

typedef struct node_s {
\end_layout

\begin_layout LyX-Code

	char title[TITLE_LEN];
\end_layout

\begin_layout LyX-Code

	char body[BODY_LEN];
\end_layout

\begin_layout LyX-Code

	date_t date;
\end_layout

\begin_layout LyX-Code

} node_t; 
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Si codifichi in linguaggio C una struttura dati senza modificare le strutture
 sopra presentate per rappresentare una lista di nodi.
\end_layout

\begin_layout Enumerate
Si codifichi in linguaggio C una procedura 
\begin_inset listings
lstparams "language=C,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline true
status open

\begin_layout Plain Layout

dumpToHTML(list_t* l, date_t birthday, char* htmlFile)
\end_layout

\end_inset

 che prende in input una lista di nodi, il giorno di nascita di una persona
 e il nome di un file e scriva su file in linguaggio HTML i soli nodi contenuti
 nella lista associati ad una data antecedente alla data di riferimento.
 
\end_layout

\begin_layout Quotation
Si ricorda che un documento HTML è un file di testo che inizia con il tag
 
\begin_inset listings
lstparams "language=HTML,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline true
status open

\begin_layout Plain Layout

<html>
\end_layout

\end_inset

 e termina con il tag 
\begin_inset listings
lstparams "language=HTML,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline true
status open

\begin_layout Plain Layout

</html>
\end_layout

\end_inset

.
 Si compone di due sezioni (head e body).
 Nella sezione head è possibile specificare dettagli come il titolo della
 pagina 
\begin_inset listings
lstparams "language=HTML,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline true
status open

\begin_layout Plain Layout

<head><title>TITOLO PAGINA</title></head>
\end_layout

\end_inset

.
 Nella sezione body è possibile specificare il contenuto del documento;
 si suggerisce l'utilizzo dei tag 
\begin_inset listings
lstparams "language=HTML,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline true
status open

\begin_layout Plain Layout

<h1>TITOLO</h1>
\end_layout

\end_inset

 e 
\begin_inset listings
lstparams "language=HTML,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline true
status open

\begin_layout Plain Layout

<p>CORPO DEL PARAGRAFO</p>
\end_layout

\end_inset

 per specificare rispettivamente i titoli e i contenuti testuali da inserire
 nel documento.
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Subsection
Soluzione C
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
dumpToHTML
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

int compareDate(date_t lhs, date_t rhs) {
\end_layout

\begin_layout Plain Layout

	if (lhs.yyyy < rhs.yyyy) return -1;
\end_layout

\begin_layout Plain Layout

	if (lhs.yyyy > rhs.yyyy) return +1;
\end_layout

\begin_layout Plain Layout

	if (lhs.mm < rhs.mm) return -1;
\end_layout

\begin_layout Plain Layout

	if (lhs.mm > rhs.mm) return +1;
\end_layout

\begin_layout Plain Layout

	if (lhs.dd < rhs.dd) return -1;
\end_layout

\begin_layout Plain Layout

	if (lhs.dd > rhs.dd) return +1;
\end_layout

\begin_layout Plain Layout

	return 0;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void dumpToHTML(my_list_elem_t* list, date_t birthday, char* htmlfile) {
\end_layout

\begin_layout Plain Layout

	FILE* f;
\end_layout

\begin_layout Plain Layout

	f = fopen(htmlfile, "w");
\end_layout

\begin_layout Plain Layout

	if (f) {
\end_layout

\begin_layout Plain Layout

		fprintf(f, "<html>
\backslash
n");
\end_layout

\begin_layout Plain Layout

		fprintf(f, "<head><title>Result page</title></head>
\backslash
n");
\end_layout

\begin_layout Plain Layout

		fprintf(f, "<body>
\backslash
n");
\end_layout

\begin_layout Plain Layout

		while (list) {
\end_layout

\begin_layout Plain Layout

			if (compareDate(list->val.date, birthday) < 0) {
\end_layout

\begin_layout Plain Layout

				fprintf(f, "<h1>%s
\backslash
n</h1>", list->val.title);
\end_layout

\begin_layout Plain Layout

				fprintf(f, "<p>%s
\backslash
n</p>", list->val.body);
\end_layout

\begin_layout Plain Layout

				fprintf(f, "<p>%d %d %d
\backslash
n</p>", list->val.date.dd, list->val.date.mm, list->val.date.yyyy);
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		list = list->next;
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	fprintf(f, "</body>
\backslash
n");
\end_layout

\begin_layout Plain Layout

	fprintf(f, "</html>
\backslash
n");
\end_layout

\begin_layout Plain Layout

	fclose(f);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
La soluzione di questo esercizio viene lasciata come esercizio a casa agli
 studenti.
 Verrà resa dipsonibile in una versione successiva di questo documento che
 sarà pubblicata in prossimità della data dell'esercitazione successiva.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Statistiche
\end_layout

\begin_layout Quotation
Si definisca una struttura di lista concatenata semplice dove ciascun nodo
 contiene un numero in virgola mobile.
\end_layout

\begin_layout Quotation
Si scriva un programma che acquisisce da tastiera un indeterminato numero
 di elementi e li inserisca nella lista.
 Al primo valore nullo inserito dall'utente, l'inserimento termina e si
 calcoli il valore minimo, massimo e mediano nella lista.
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Subsection
Soluzione C
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout Plain Layout

#include <stdlib.h>
\end_layout

\begin_layout Plain Layout

#include <stdio.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

typedef struct node_s {
\end_layout

\begin_layout Plain Layout

	float val;
\end_layout

\begin_layout Plain Layout

	struct node_s *next;
\end_layout

\begin_layout Plain Layout

} node_t;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int countNodes(node_t *head);
\end_layout

\begin_layout Plain Layout

node_t * getElementByPosition(node_t *head, int position);
\end_layout

\begin_layout Plain Layout

node_t * loadList();
\end_layout

\begin_layout Plain Layout

node_t * sortList(node_t *head);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main() {
\end_layout

\begin_layout Plain Layout

	node_t *head;
\end_layout

\begin_layout Plain Layout

	node_t *min, *max, *med;
\end_layout

\begin_layout Plain Layout

	int numberOfNodes;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	head = loadList();
\end_layout

\begin_layout Plain Layout

	if (head == NULL) {
\end_layout

\begin_layout Plain Layout

		printf("Lista vuota
\backslash
n");
\end_layout

\begin_layout Plain Layout

		return 0;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	head = sortList(head);
\end_layout

\begin_layout Plain Layout

	numberOfNodes = countNodes(head);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	/* min = head */
\end_layout

\begin_layout Plain Layout

	min = getElementByPosition(head, 0);
\end_layout

\begin_layout Plain Layout

	max = getElementByPosition(head, numberOfNodes - 1);
\end_layout

\begin_layout Plain Layout

	med = getElementByPosition(head, numberOfNodes / 2);
\end_layout

\begin_layout Plain Layout

	printf("Minimo: %f
\backslash
tMediano: %f
\backslash
tMassimo:%f
\backslash
n", min->val, med->val, max->val);
\end_layout

\begin_layout Plain Layout

	return 0;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int countNodes(node_t *head) {
\end_layout

\begin_layout Plain Layout

	int i;
\end_layout

\begin_layout Plain Layout

	for(i = 0; head; head = head->next, i++);
\end_layout

\begin_layout Plain Layout

	return i;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

node_t * getElementByPosition(node_t *head, int position) {
\end_layout

\begin_layout Plain Layout

	int i;
\end_layout

\begin_layout Plain Layout

	if (position < 0) {
\end_layout

\begin_layout Plain Layout

		return NULL;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	i = 0;
\end_layout

\begin_layout Plain Layout

	while (i < position && head) {
\end_layout

\begin_layout Plain Layout

		i ++;
\end_layout

\begin_layout Plain Layout

		head = head->next;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	return head;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

node_t * loadList() {
\end_layout

\begin_layout Plain Layout

	node_t *head, *tmp, *aux;
\end_layout

\begin_layout Plain Layout

	float tmp_val;
\end_layout

\begin_layout Plain Layout

	head = NULL;
\end_layout

\begin_layout Plain Layout

	tmp = head;
\end_layout

\begin_layout Plain Layout

	printf("Inserisci un valore nella lista (0 per terminare): ");
\end_layout

\begin_layout Plain Layout

	scanf("%f", &tmp_val);
\end_layout

\begin_layout Plain Layout

	while (tmp_val) {
\end_layout

\begin_layout Plain Layout

		tmp = (node_t*) malloc(sizeof(node_t));
\end_layout

\begin_layout Plain Layout

		if (tmp == NULL) {
\end_layout

\begin_layout Plain Layout

			printf("Errore di allocazione memoria.
\backslash
n");
\end_layout

\begin_layout Plain Layout

			return head;
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		tmp->val = tmp_val;
\end_layout

\begin_layout Plain Layout

		tmp->next = NULL;
\end_layout

\begin_layout Plain Layout

		if (head) {
\end_layout

\begin_layout Plain Layout

			for (aux = head; aux->next; aux = aux->next);
\end_layout

\begin_layout Plain Layout

			aux->next = tmp;
\end_layout

\begin_layout Plain Layout

		} else {
\end_layout

\begin_layout Plain Layout

			head = tmp;
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		printf("Inserisci un valore nella lista (0 per terminare): ");
\end_layout

\begin_layout Plain Layout

		scanf("%f", &tmp_val);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	return head;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* Bubblesort: take head of the list as parameter and returns the updated
 head of the list */
\end_layout

\begin_layout Plain Layout

node_t * sortList(node_t *head) {
\end_layout

\begin_layout Plain Layout

	int changed;
\end_layout

\begin_layout Plain Layout

	node_t *prev, *prev2, *tmp, *other;
\end_layout

\begin_layout Plain Layout

	if (head == NULL || head->next == NULL) {
\end_layout

\begin_layout Plain Layout

		return head;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	do {
\end_layout

\begin_layout Plain Layout

		changed = 0; 			/* termination flag */
\end_layout

\begin_layout Plain Layout

		prev2 = NULL;			/* element before 	*/
\end_layout

\begin_layout Plain Layout

		prev = head;			/*  first node to compare */
\end_layout

\begin_layout Plain Layout

		tmp = prev->next;	/* second node to compare */
\end_layout

\begin_layout Plain Layout

		while (tmp != NULL) {
\end_layout

\begin_layout Plain Layout

			other = tmp->next;
\end_layout

\begin_layout Plain Layout

			if (prev->val > tmp->val) {
\end_layout

\begin_layout Plain Layout

				/* swap nodes */
\end_layout

\begin_layout Plain Layout

				tmp->next = prev;
\end_layout

\begin_layout Plain Layout

				prev->next = other;
\end_layout

\begin_layout Plain Layout

				if (prev == head) {
\end_layout

\begin_layout Plain Layout

					head = tmp;
\end_layout

\begin_layout Plain Layout

				}
\end_layout

\begin_layout Plain Layout

				if (prev2) {
\end_layout

\begin_layout Plain Layout

					prev2->next = tmp;
\end_layout

\begin_layout Plain Layout

				}
\end_layout

\begin_layout Plain Layout

				/* update for next iteration */
\end_layout

\begin_layout Plain Layout

				prev2 = tmp;
\end_layout

\begin_layout Plain Layout

				tmp = other;
\end_layout

\begin_layout Plain Layout

				changed = 1;
\end_layout

\begin_layout Plain Layout

			} else {
\end_layout

\begin_layout Plain Layout

				/* update for next iteration */
\end_layout

\begin_layout Plain Layout

				prev2 = prev;
\end_layout

\begin_layout Plain Layout

				prev = tmp;
\end_layout

\begin_layout Plain Layout

				tmp = other;
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	} while (changed);
\end_layout

\begin_layout Plain Layout

	return head;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section*
Licenza e crediti
\end_layout

\begin_layout Subsection*
Licenza beerware
\begin_inset Foot
status open

\begin_layout Plain Layout
http://people.freebsd.org/~phk/
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Quest'opera è stata redatta da Stefano Cherubin.
 Mantenendo questa nota, puoi fare quello che vuoi con quest'opera.
 Se ci dovessimo incontrare e tu ritenessi che quest'opera lo valga, in
 cambio puoi offrirmi una birra.
\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\end_body
\end_document
