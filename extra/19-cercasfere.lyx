#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\IfFileExists{lmodern.sty}{\usepackage{lmodern}}{}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "tgcursor" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language french
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Radar Cerca Sfere in C
\end_layout

\begin_layout Author
Stefano Cherubin
\begin_inset Foot
status open

\begin_layout Plain Layout
<nome>.<cognome>@polimi.it
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Graphics
	filename square_framed.pdf
	width 3.5cm

\end_inset


\end_layout

\begin_layout Date
05/12/2019
\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Address
[
\series bold
Informatica A
\series default
] Esercitazione #19
\end_layout

\begin_layout Standard
\begin_inset VSpace 5theight%
\end_inset


\end_layout

\begin_layout Right Address
corso per Ing.
 Gestionale a.a.
 2019/20
\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Radar
\end_layout

\begin_layout Quotation
Se riuscirete a raccogliere tutte le sfere, un desiderio potrete vedere
 avverato.
 La vostra assistente ha costruito un radar in grado di identificare la
 posizione delle sfere attorno a voi.
 Il radar manca però di un sistema di visualizzazione.
 Implementatelo voi.
\end_layout

\begin_layout Quotation
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Subsection
Versione base
\end_layout

\begin_layout Quotation
La mappa ha una risoluzione abbastanza bassa, si consideri una griglia quadrata
 15x15.
\end_layout

\begin_layout Quotation
Il sistema radar vi manda la posizione di una sfera come coordinate di una
 matrice.
 Evidenziate la posizione della sfera sulla mappa tramite una 
\emph on
heatmap
\emph default
 a 3 livelli di intensità.
\end_layout

\begin_layout Quotation
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Quotation
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Subsection
Variante: sfere vicine
\end_layout

\begin_layout Quotation
Nel caso in cui il radar evidenzi la posizione di due o più sfere nelle
 vicinanze, questo chiederà al vostro sottoprogramma di evidenziare più
 volte una sfera sulla stessa matrice.
 Nel caso in cui l'area di influenza delle sfere sia sovrapposta, si mostri
 l'influenza della sfera più vicina.
\end_layout

\begin_layout Quotation
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Subsection
Soluzioni
\end_layout

\begin_layout Subsubsection
Versione base
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
Cerca sfere (base)
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

#include <stdio.h>
\end_layout

\begin_layout Plain Layout

#define N 15
\end_layout

\begin_layout Plain Layout

#define M 15
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void colora(int mappa[][M], int r, int c, int level);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

const int my_level = 3;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main (int argc, char*argv[]) {
\end_layout

\begin_layout Plain Layout

	int mappa[N][M];
\end_layout

\begin_layout Plain Layout

	int i, j;
\end_layout

\begin_layout Plain Layout

	for (i = 0; i < N; i++)
\end_layout

\begin_layout Plain Layout

		for (j = 0; j < M; j++)
\end_layout

\begin_layout Plain Layout

			mappa[i][j] = 0;
\end_layout

\begin_layout Plain Layout

	colora(mappa, 5, 14, my_level);
\end_layout

\begin_layout Plain Layout

	return 0;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void colora(int mappa[][M], int r, int c, int level) {
\end_layout

\begin_layout Plain Layout

	if (r >= N || r < 0)
\end_layout

\begin_layout Plain Layout

		return;
\end_layout

\begin_layout Plain Layout

	if (c >= M || c < 0)
\end_layout

\begin_layout Plain Layout

		return;
\end_layout

\begin_layout Plain Layout

	int l;
\end_layout

\begin_layout Plain Layout

	for (l = level; l >= 0; l--) {
\end_layout

\begin_layout Plain Layout

		for (int x = r - l; x <= r + l; ++x)
\end_layout

\begin_layout Plain Layout

			for (int y = c - l; y <= c + l; ++y) {
\end_layout

\begin_layout Plain Layout

	 			if(!(x < 0 || x >= N || y < 0 || y >= M))
\end_layout

\begin_layout Plain Layout

					if (mappa[x][y] < level + 1 - l)
\end_layout

\begin_layout Plain Layout

						mappa[x][y] = level + 1 - l;
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	return;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Subsubsection
Lunghezza dinamica
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
Mastermind (dynamic lenght)
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

#include <stdio.h>
\end_layout

\begin_layout Plain Layout

#include <stdlib.h>
\end_layout

\begin_layout Plain Layout

#include <time.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void colora(int mappa[][M], int r, int c, int level);
\end_layout

\begin_layout Plain Layout

int main (int argc, char*argv[]) { int mappa[N][M]; int i, j; FILE*fin;
\end_layout

\begin_layout Plain Layout

for (i = 0; i < N; i++)  for (j = 0; j < M; j++)   mappa[i][j] = 0;
\end_layout

\begin_layout Plain Layout

colora(mappa, 5, 14, my_level);
\end_layout

\begin_layout Plain Layout

return 0; } 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Subsubsection
Variante difficile come l'originale
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
Mastermind (like the original)
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

#include <stdio.h>
\end_layout

\begin_layout Plain Layout

#include <stdlib.h>
\end_layout

\begin_layout Plain Layout

#include <time.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define MAXTURNS 10
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main() {
\end_layout

\begin_layout Plain Layout

	int* sol;
\end_layout

\begin_layout Plain Layout

	int* input;
\end_layout

\begin_layout Plain Layout

	int i, j, maxColors, numDigits, guessed;
\end_layout

\begin_layout Plain Layout

	int turn, found;
\end_layout

\begin_layout Plain Layout

	const char black = 'X';
\end_layout

\begin_layout Plain Layout

	const int BLACK_INPUT = -1;
\end_layout

\begin_layout Plain Layout

	const char white = 'O';
\end_layout

\begin_layout Plain Layout

	const int WHITE_INPUT = -2;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	srand(time(NULL));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	printf("*****Welcome to Mastermind*****
\backslash
n");
\end_layout

\begin_layout Plain Layout

	printf("Please tell me how many color you'd like to play with: ");
\end_layout

\begin_layout Plain Layout

	scanf("%d", &maxColors);
\end_layout

\begin_layout Plain Layout

	while(maxColors <= 1) {
\end_layout

\begin_layout Plain Layout

		printf("
\backslash
nProvide a number of color greater than 1 ");
\end_layout

\begin_layout Plain Layout

		scanf("%d", &maxColors);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	printf("Please tell me how many digits should have your challenge: ");
\end_layout

\begin_layout Plain Layout

	scanf("%d", &numDigits);
\end_layout

\begin_layout Plain Layout

	while(numDigits <= 1) {
\end_layout

\begin_layout Plain Layout

		printf("
\backslash
nProvide a number of digits greater than 1 ");
\end_layout

\begin_layout Plain Layout

		scanf("%d", &numDigits);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	sol = (int*) malloc(sizeof(int) * numDigits);
\end_layout

\begin_layout Plain Layout

	if (!sol) {
\end_layout

\begin_layout Plain Layout

		printf("Memory Error: can't allocate.
\backslash
n");
\end_layout

\begin_layout Plain Layout

		return -1;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	input = (int*) malloc(sizeof(int) * numDigits);
\end_layout

\begin_layout Plain Layout

	if (!input) {
\end_layout

\begin_layout Plain Layout

		free(sol);
\end_layout

\begin_layout Plain Layout

		printf("Memory Error: can't allocate.
\backslash
n");
\end_layout

\begin_layout Plain Layout

		return -1;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	for (i = 0; i < numDigits; i++) {
\end_layout

\begin_layout Plain Layout

		sol[i] = rand() % maxColors;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	printf("*** hey, try to guess! ***
\backslash
n");
\end_layout

\begin_layout Plain Layout

	turn  = 0;
\end_layout

\begin_layout Plain Layout

	do {
\end_layout

\begin_layout Plain Layout

		printf("
\backslash
nGuess my %d numbers (from 0 to %d)
\backslash
n", numDigits, maxColors - 1);
\end_layout

\begin_layout Plain Layout

		for (i = 0; i < numDigits; i++) {
\end_layout

\begin_layout Plain Layout

			scanf(" %d", &input[i]);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		/* look for blacks */
\end_layout

\begin_layout Plain Layout

		guessed = 1;
\end_layout

\begin_layout Plain Layout

		for (i = 0; i < numDigits; i++) {
\end_layout

\begin_layout Plain Layout

			if (input[i] == sol[i]) {
\end_layout

\begin_layout Plain Layout

				input[i] = BLACK_INPUT;
\end_layout

\begin_layout Plain Layout

			} else {
\end_layout

\begin_layout Plain Layout

				guessed = 0;
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		/* look for whites */
\end_layout

\begin_layout Plain Layout

		for (i = 0; i < numDigits; i++) {
\end_layout

\begin_layout Plain Layout

			if (input[i] != BLACK_INPUT) {
\end_layout

\begin_layout Plain Layout

				found = 0;
\end_layout

\begin_layout Plain Layout

				for (j = 0; j < numDigits && !found; j++) {
\end_layout

\begin_layout Plain Layout

					if (input[j] == sol[i]) {
\end_layout

\begin_layout Plain Layout

						input[j] = WHITE_INPUT;
\end_layout

\begin_layout Plain Layout

						found = 1;
\end_layout

\begin_layout Plain Layout

					}
\end_layout

\begin_layout Plain Layout

				}
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		/* output */
\end_layout

\begin_layout Plain Layout

		for (i = 0; i < numDigits; i++) {
\end_layout

\begin_layout Plain Layout

			if (input[i] == BLACK_INPUT) {
\end_layout

\begin_layout Plain Layout

				printf("%c ", black);
\end_layout

\begin_layout Plain Layout

			} else if (input[i] == WHITE_INPUT) {
\end_layout

\begin_layout Plain Layout

				printf("%c ", white);
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		++turn;
\end_layout

\begin_layout Plain Layout

	} while(!guessed && turn < MAXTURNS);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	if (turn < MAXTURNS) {
\end_layout

\begin_layout Plain Layout

		printf("
\backslash
nCongrats! You've guessed in %d turns!
\backslash
n", turn);
\end_layout

\begin_layout Plain Layout

	} else {
\end_layout

\begin_layout Plain Layout

		printf("
\backslash
nComputer Wins
\backslash
n");
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	free(input);
\end_layout

\begin_layout Plain Layout

	free(sol);
\end_layout

\begin_layout Plain Layout

	return 0;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section*
Licenza e crediti
\end_layout

\begin_layout Subsection*
Licenza beerware
\begin_inset Foot
status open

\begin_layout Plain Layout
http://people.freebsd.org/~phk/
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Quest'opera è stata redatta da Stefano Cherubin.
 Mantenendo questa nota, puoi fare quello che vuoi con quest'opera.
 Se ci dovessimo incontrare e tu ritenessi che quest'opera lo valga, in
 cambio puoi offrirmi una birra.
\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\end_body
\end_document
