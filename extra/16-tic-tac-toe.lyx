#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\IfFileExists{lmodern.sty}{\usepackage{lmodern}}{}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "tgcursor" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language french
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Tic-Tac-Toe in C
\end_layout

\begin_layout Author
Stefano Cherubin
\begin_inset Foot
status open

\begin_layout Plain Layout
<nome>.<cognome>@polimi.it
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Graphics
	filename square_framed.pdf
	width 3.5cm

\end_inset


\end_layout

\begin_layout Date
29/11/2018
\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Address
[
\series bold
Informatica A
\series default
] Esercitazione #16
\end_layout

\begin_layout Standard
\begin_inset VSpace 5theight%
\end_inset


\end_layout

\begin_layout Right Address
corso per Ing.
 Gestionale a.a.
 2018/19
\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Una griglia
\end_layout

\begin_layout Quote
Scrivere una funzione C che stampi a video una griglia rettangolare di dimension
i arbitrarie.
\end_layout

\begin_layout Quote
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
stampa griglia sul terminale
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

#include<stdio.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define M 3
\end_layout

\begin_layout Plain Layout

#define N 3
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void print_grid() {
\end_layout

\begin_layout Plain Layout

  int i,j;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  // upper border
\end_layout

\begin_layout Plain Layout

  for(j = 0; j < N; j++)
\end_layout

\begin_layout Plain Layout

    printf("__");
\end_layout

\begin_layout Plain Layout

  printf("
\backslash
n");
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  for(i = 0; i < M; i++) {
\end_layout

\begin_layout Plain Layout

    // bottom border
\end_layout

\begin_layout Plain Layout

    for (j = 0; j < N; j++)
\end_layout

\begin_layout Plain Layout

      printf("|_");
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // right border and newline
\end_layout

\begin_layout Plain Layout

    printf("|
\backslash
n");
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  return;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Pretty print di una matrice
\end_layout

\begin_layout Quote
Scrivere una funzione C che stampi a video una matrice di elementi di tipo
 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

char
\end_layout

\end_inset

 con opportuni contorni.
\end_layout

\begin_layout Quote
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
stampa griglia con contenuto sul terminale
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

#include<stdio.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define M 3
\end_layout

\begin_layout Plain Layout

#define N 3
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

char map[M][N]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void print_map() {
\end_layout

\begin_layout Plain Layout

  int i,j;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  // upper border
\end_layout

\begin_layout Plain Layout

  for(j = 0; j < N; j++)
\end_layout

\begin_layout Plain Layout

    printf("____");
\end_layout

\begin_layout Plain Layout

  printf("
\backslash
n");
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  for(i = 0; i < M; i++) {
\end_layout

\begin_layout Plain Layout

    // some space between border and content
\end_layout

\begin_layout Plain Layout

    for (j = 0; j < N; j++)
\end_layout

\begin_layout Plain Layout

      printf("|   ");
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // right border and newline
\end_layout

\begin_layout Plain Layout

    printf("|
\backslash
n");
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // content
\end_layout

\begin_layout Plain Layout

    for (j = 0; j < N; j++)
\end_layout

\begin_layout Plain Layout

      printf("| %c ", map[i][j]);
\end_layout

\begin_layout Plain Layout

    // right border and newline
\end_layout

\begin_layout Plain Layout

    printf("|
\backslash
n");
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // bottom border
\end_layout

\begin_layout Plain Layout

    for (j = 0; j < N; j++)
\end_layout

\begin_layout Plain Layout

      printf("|___");
\end_layout

\begin_layout Plain Layout

    // right border and newline
\end_layout

\begin_layout Plain Layout

    printf("|
\backslash
n");
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  return;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Tic-Tac-Toe
\end_layout

\begin_layout Quotation
Si implementi in C il gioco tic-tac-toe.
\end_layout

\begin_layout Quotation
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Subsection
Griglia di tic-tac-toe
\end_layout

\begin_layout Quotation
Stampare a video la griglia di tic-tac-toe, con opportuno spazio per eventuali
 simboli lasciati dai giocatori.
\end_layout

\begin_layout Quotation
Si cancelli ogni traccia di precedenti versioni della matrice dal terminale
\end_layout

\begin_layout Quotation
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Subsubsection
Clear screen
\end_layout

\begin_layout Standard
Per pulire lo schermo esiste una sequenza di comandi che, se inviati in
 output al terminale, è in grado di:
\end_layout

\begin_layout Itemize
posizionare il cursore all'inizio della schermata
\end_layout

\begin_layout Itemize
pulire la schermata dalla posizione del cursore in avanti
\end_layout

\begin_layout Standard
Questi comandi sono rispettivamente 
\backslash
033[H e 
\backslash
033[J e sono supportati dai principali terminali dei sistemi Linux e Mac
 OS.
 Windows invece offre la funzione di libreria clrscr() dall'header conio.h
 che implementa la stessa funzionalità.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
Tic-Tac-Toe
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

#include<stdio.h>
\end_layout

\begin_layout Plain Layout

//#include <conio.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define L 3
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void print_map(char map[][L]) {
\end_layout

\begin_layout Plain Layout

  printf("
\backslash
033[H
\backslash
033[J");
\end_layout

\begin_layout Plain Layout

  // clrscr();
\end_layout

\begin_layout Plain Layout

  printf(" %c | %c | %c 
\backslash
n", map[0][0], map[0][1], map[0][2]);
\end_layout

\begin_layout Plain Layout

  printf("___|___|___
\backslash
n");
\end_layout

\begin_layout Plain Layout

  printf("   |   |   
\backslash
n");
\end_layout

\begin_layout Plain Layout

  printf(" %c | %c | %c 
\backslash
n", map[1][0], map[1][1], map[1][2]);
\end_layout

\begin_layout Plain Layout

  printf("___|___|___
\backslash
n");
\end_layout

\begin_layout Plain Layout

  printf("   |   |   
\backslash
n");
\end_layout

\begin_layout Plain Layout

  printf(" %c | %c | %c 
\backslash
n", map[2][0], map[2][1], map[2][2]);
\end_layout

\begin_layout Plain Layout

  return;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Quotation
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Subsection
Controllare vittoria / sconfitta
\end_layout

\begin_layout Quotation
Data una matrice che rappresenta lo stato del gioco, determinare se uno
 dei due giocatori ha vinto.
\end_layout

\begin_layout Quotation
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
Tic-Tac-Toe (controllo vittoria)
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

#define L 3
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int win(char map[][L]) {
\end_layout

\begin_layout Plain Layout

  int i, flag;
\end_layout

\begin_layout Plain Layout

  for (flag = 1, i = 0; i < L && flag; i++)
\end_layout

\begin_layout Plain Layout

   if (map[i][0] == map[i][1] && map[i][0] == map[i][2] && map[i][0] !=
 ' ')
\end_layout

\begin_layout Plain Layout

    flag = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  for (i = 0; i < L && flag; i++)
\end_layout

\begin_layout Plain Layout

   if (map[0][i] == map[1][i] && map[0][i] == map[2][i] && map[0][i] !=
 ' ')
\end_layout

\begin_layout Plain Layout

    flag = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  if (map[0][0] == map[1][1] && map[0][0] == map[2][2] && map[0][0] != '
 ')
\end_layout

\begin_layout Plain Layout

    flag = 0;
\end_layout

\begin_layout Plain Layout

  if (map[0][2] == map[1][1] && map[0][2] == map[2][0] && map[0][2] != '
 ')
\end_layout

\begin_layout Plain Layout

    flag = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  if(flag)
\end_layout

\begin_layout Plain Layout

    return 0;
\end_layout

\begin_layout Plain Layout

  return 1;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Subsection
Accesso alla matrice
\end_layout

\begin_layout Quote
Semplificare l'accesso alla matrice, usando un unico valore 
\begin_inset Formula $pos\in\left[1;9\right]$
\end_inset

 per indicare la posizione.
\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
Uno switch-case funziona sempre in questi casi.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
Tic-Tac-Toe matrix access
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

#define L 3
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

char get_elem(int pos, char map[][L]){
\end_layout

\begin_layout Plain Layout

  switch(pos){
\end_layout

\begin_layout Plain Layout

   case 1:
\end_layout

\begin_layout Plain Layout

    return map[0][0];
\end_layout

\begin_layout Plain Layout

    break;
\end_layout

\begin_layout Plain Layout

   case 2:
\end_layout

\begin_layout Plain Layout

    return map[0][1];
\end_layout

\begin_layout Plain Layout

    break;
\end_layout

\begin_layout Plain Layout

   case 3:
\end_layout

\begin_layout Plain Layout

    return map[0][2];
\end_layout

\begin_layout Plain Layout

    break;
\end_layout

\begin_layout Plain Layout

   case 4:
\end_layout

\begin_layout Plain Layout

    return map[1][0];
\end_layout

\begin_layout Plain Layout

    break;
\end_layout

\begin_layout Plain Layout

   case 5:
\end_layout

\begin_layout Plain Layout

    return map[1][1];
\end_layout

\begin_layout Plain Layout

    break;
\end_layout

\begin_layout Plain Layout

   case 6:
\end_layout

\begin_layout Plain Layout

    return map[1][2];
\end_layout

\begin_layout Plain Layout

    break;
\end_layout

\begin_layout Plain Layout

   case 7:
\end_layout

\begin_layout Plain Layout

    return map[2][0];
\end_layout

\begin_layout Plain Layout

    break;
\end_layout

\begin_layout Plain Layout

   case 8:
\end_layout

\begin_layout Plain Layout

    return map[2][1];
\end_layout

\begin_layout Plain Layout

    break;
\end_layout

\begin_layout Plain Layout

   case 9:
\end_layout

\begin_layout Plain Layout

    return map[2][2];
\end_layout

\begin_layout Plain Layout

    break;
\end_layout

\begin_layout Plain Layout

   default:
\end_layout

\begin_layout Plain Layout

    return '
\backslash
0';
\end_layout

\begin_layout Plain Layout

    break;
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

   return '
\backslash
0';
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Standard
Tuttavia è possibile ottimizzare l'accesso con un gioco di indici.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
Tic-Tac-Toe - simplified matrix access
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

#define L 3
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

char get_elem(int pos, char map[][L]) {
\end_layout

\begin_layout Plain Layout

  return map[(pos-1)/L][(pos-1)%L];
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void set_elem(int pos, char val, char map[][L]) {
\end_layout

\begin_layout Plain Layout

   map[(pos - 1) / L][(pos - 1) % L] = val;
\end_layout

\begin_layout Plain Layout

   return;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Subsection
Il gioco completo - Soluzioni
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
Tic-Tac-Toe
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

#include<stdio.h>
\end_layout

\begin_layout Plain Layout

//#include<conio.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define L 3
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

const char X = 'x';
\end_layout

\begin_layout Plain Layout

const char O = 'o';
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void print_map(char map[][L]);
\end_layout

\begin_layout Plain Layout

char get_elem(int pos, char map[][L]);
\end_layout

\begin_layout Plain Layout

void set_elem(int pos, char val, char map[][L]);
\end_layout

\begin_layout Plain Layout

int win(char map[][L]);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main(int argc, char*argv[]){
\end_layout

\begin_layout Plain Layout

  char mat[L][L];
\end_layout

\begin_layout Plain Layout

  int i, j, k;
\end_layout

\begin_layout Plain Layout

  int player = 0;
\end_layout

\begin_layout Plain Layout

  int turn = 0;
\end_layout

\begin_layout Plain Layout

  for (i = 0; i < L; i++)
\end_layout

\begin_layout Plain Layout

    for (j = 0; j < L; j++)
\end_layout

\begin_layout Plain Layout

      mat[i][j] = ' ';
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  print_map(mat);
\end_layout

\begin_layout Plain Layout

  do {
\end_layout

\begin_layout Plain Layout

    do {
\end_layout

\begin_layout Plain Layout

      printf("Turno %d - dove vuoi posizionare? (1-9): ", turn);
\end_layout

\begin_layout Plain Layout

      scanf("%d", &k);
\end_layout

\begin_layout Plain Layout

    }while(get_elem(k, mat) != ' ');
\end_layout

\begin_layout Plain Layout

   set_elem(k, (player++ % 2) ? X : O, mat);
\end_layout

\begin_layout Plain Layout

   print_map(mat);
\end_layout

\begin_layout Plain Layout

   turn++;
\end_layout

\begin_layout Plain Layout

  } while(turn < 9 && !win(mat));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  print_map(mat);
\end_layout

\begin_layout Plain Layout

  return 0;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int win(char map[][L]) {
\end_layout

\begin_layout Plain Layout

  int i, flag;
\end_layout

\begin_layout Plain Layout

  for (flag = 1, i = 0; i < L && flag; i++)
\end_layout

\begin_layout Plain Layout

   if (map[i][0] == map[i][1] && map[i][0] == map[i][2] && map[i][0] !=
 ' ')
\end_layout

\begin_layout Plain Layout

    flag = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  for (i = 0; i < L && flag; i++)
\end_layout

\begin_layout Plain Layout

   if (map[0][i] == map[1][i] && map[0][i] == map[2][i] && map[0][i] !=
 ' ')
\end_layout

\begin_layout Plain Layout

    flag = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  if (map[0][0] == map[1][1] && map[0][0] == map[2][2] && map[0][0] != '
 ')
\end_layout

\begin_layout Plain Layout

    flag = 0;
\end_layout

\begin_layout Plain Layout

  if (map[0][2] == map[1][1] && map[0][2] == map[2][0] && map[0][2] != '
 ')
\end_layout

\begin_layout Plain Layout

    flag = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  if(flag)
\end_layout

\begin_layout Plain Layout

   return 0;
\end_layout

\begin_layout Plain Layout

  return 1;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

char get_elem(int pos, char map[][L]) {
\end_layout

\begin_layout Plain Layout

  return map[(pos-1)/L][(pos-1)%L];
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void set_elem(int pos, char val, char map[][L]) {
\end_layout

\begin_layout Plain Layout

   map[(pos - 1) / L][(pos - 1) % L] = val;
\end_layout

\begin_layout Plain Layout

   return;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void print_map(char map[][L]) {
\end_layout

\begin_layout Plain Layout

  // clrscr();
\end_layout

\begin_layout Plain Layout

  printf("
\backslash
033[H
\backslash
033[J");
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  printf(" %c | %c | %c 
\backslash
n", map[0][0], map[0][1], map[0][2]);
\end_layout

\begin_layout Plain Layout

  printf("___|___|___
\backslash
n");
\end_layout

\begin_layout Plain Layout

  printf("   |   |   
\backslash
n");
\end_layout

\begin_layout Plain Layout

  printf(" %c | %c | %c 
\backslash
n", map[1][0], map[1][1], map[1][2]);
\end_layout

\begin_layout Plain Layout

  printf("___|___|___
\backslash
n");
\end_layout

\begin_layout Plain Layout

  printf("   |   |   
\backslash
n");
\end_layout

\begin_layout Plain Layout

  printf(" %c | %c | %c 
\backslash
n", map[2][0], map[2][1], map[2][2]);
\end_layout

\begin_layout Plain Layout

  return;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section*
Licenza e crediti
\end_layout

\begin_layout Subsection*
Licenza beerware
\begin_inset Foot
status open

\begin_layout Plain Layout
http://people.freebsd.org/~phk/
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Quest'opera è stata redatta da Stefano Cherubin.
 Mantenendo questa nota, puoi fare quello che vuoi con quest'opera.
 Se ci dovessimo incontrare e tu ritenessi che quest'opera lo valga, in
 cambio puoi offrirmi una birra.
\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\end_body
\end_document
