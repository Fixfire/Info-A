#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter tgcursor
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language french
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Mastermind in C
\end_layout

\begin_layout Author
Stefano Cherubin
\begin_inset Foot
status open

\begin_layout Plain Layout
<nome.cognome>@polimi.it
\end_layout

\end_inset


\end_layout

\begin_layout Date
12/01/2016
\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Address
[
\series bold
Informatica A
\series default
] Esercitazione #16
\end_layout

\begin_layout Standard
\begin_inset VSpace 5theight%
\end_inset


\end_layout

\begin_layout Right Address
corso per Ing.
 Gestionale a.a.
 2015/16
\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Mastermind
\end_layout

\begin_layout Quotation
Si implementi la seguenti versioni semplificate del famoso gioco crittografico
 mastermind.
\end_layout

\begin_layout Subsection
Versione base
\end_layout

\begin_layout Quotation
Il gioco si svolge utente contro computer.
 Il computer genera casualmente un codice come disposizione con ripetizione
 di lunghezza N.
 Ciascuna cifra del codice (detta anche colore) deve essere rappresentata
 da un numero intero 
\begin_inset Formula $elem\in\left[0;maxColors-1\right]$
\end_inset

.
 
\end_layout

\begin_layout Quotation
La variabile 
\begin_inset Formula $maxColors$
\end_inset

 rappresenta la difficoltà del gioco ed è inserita dal giocatore a inizio
 partita (difficoltà minima 
\begin_inset Formula $maxColors=2$
\end_inset

).
 La lunghezza del codice N viene impostata nel codice tramite 
\begin_inset listings
lstparams "language=C,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline true
status open

\begin_layout Plain Layout

#define N 4
\end_layout

\end_inset

.
\end_layout

\begin_layout Quotation
Lo scopo del gioco è indovinare il codice generato dal computer nel minor
 numero di tentativi.
\end_layout

\begin_layout Quotation
Il turno si svolge nel seguente modo: il giocatore prova ad inserire un
 codice, il computer analizza il codice inserito e fornisce come indicazione
 il numero e la posizione degli elementi corretti stampando a video un carattere
 
\begin_inset listings
lstparams "language=C,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline true
status open

\begin_layout Plain Layout

const char miss = '_';
\end_layout

\end_inset

 in corrispondenza di ogni elemento non indovinato, 
\begin_inset listings
lstparams "language=C,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline true
status open

\begin_layout Plain Layout

const char hit = 'X';
\end_layout

\end_inset

 in corrispondenza di un elemento indovinato.
\end_layout

\begin_layout Quotation
Si stampi a video il numero di turni che il giocatore ha impiegato a indovinare
 il codice.
\end_layout

\begin_layout Subsection
Variante: lunghezza dinamica
\end_layout

\begin_layout Quotation
Si consideri il gioco descritto al punto precedente.
 Si renda possibile al giocatore scegliere il numero N di cifre con cui
 giocare.
 Il giocatore sceglierà il numero di cifre inserendolo in input dopo aver
 scelto il numero dei colori.
 Sia 
\begin_inset Formula $numDigits=2$
\end_inset

 il numero minimo di cifre consentite.
\end_layout

\begin_layout Subsection
Variante: difficile come il gioco originale
\end_layout

\begin_layout Quotation
Si consideri il gioco descritto al punto precedente.
 Si applichino modifiche alle regole del turno e alle condizioni di fine
 del gioco.
\end_layout

\begin_layout Subsubsection
Regole del turno
\end_layout

\begin_layout Quotation
Durante ogni turno, l'analisi del computer non indica posizione e numero
 degli elementi indovinati ma fornisce soltanto due tipi di simbolo in output
 
\begin_inset listings
lstparams "language=C,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline true
status open

\begin_layout Plain Layout

const char black = 'X';
\end_layout

\end_inset

 e 
\begin_inset listings
lstparams "language=C,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline true
status open

\begin_layout Plain Layout

const char white = 'O';
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Description
black se compare un simbolo black significa che nel codice inserito dall'utente
 vi era una corrispondenza per colore e posizione rispetto al codice da
 indovinare.
 Il numero di simboli black indica il numero di corrispondenze esatte individuat
e, la loro posizione non ha alcun significato.
\end_layout

\begin_layout Description
white se compare un simbolo white significa che nel codice inserito dall'utente
 vi era una corrispondenza per colore ma non per posizione rispetto al codice
 da indovinare.
 Il numero di simboli white indica il numero di corrispondenze esatte individuat
e, la loro posizione non ha alcun significato.
\end_layout

\end_deeper
\begin_layout Subsubsection
Condizione di sconfitta
\end_layout

\begin_layout Quotation
Si definisca 
\begin_inset listings
lstparams "language=C,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline true
status open

\begin_layout Plain Layout

#define MAXTURN
\end_layout

\end_inset

 inoltre un numero massimo di turni che l'utente ha per indovinare.
 Se l'utente supera questo numero, si dice che il gioco viene vinto dal
 computer.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Subsection
Soluzioni
\end_layout

\begin_layout Subsubsection
Versione base
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
Mastermind (ultra-simplified)
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

#include <stdio.h>
\end_layout

\begin_layout Plain Layout

#include <stdlib.h>
\end_layout

\begin_layout Plain Layout

#include <time.h>
\end_layout

\begin_layout Plain Layout

#define LEN 4
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main() {
\end_layout

\begin_layout Plain Layout

	int sol[LEN];
\end_layout

\begin_layout Plain Layout

	int input[LEN];
\end_layout

\begin_layout Plain Layout

	int i, maxColors, guessed, turn;
\end_layout

\begin_layout Plain Layout

	const char hit = 'X';
\end_layout

\begin_layout Plain Layout

	const char miss = '_';
\end_layout

\begin_layout Plain Layout

	/* set random seed to current time */
\end_layout

\begin_layout Plain Layout

	srand(time(NULL)); 
\end_layout

\begin_layout Plain Layout

	printf("*****Welcome to Mastermind*****
\backslash
n");
\end_layout

\begin_layout Plain Layout

	printf("Please tell me how many color you'd like to play with: ");
\end_layout

\begin_layout Plain Layout

	scanf("%d", &maxColors);
\end_layout

\begin_layout Plain Layout

	while(maxColors <= 1) {
\end_layout

\begin_layout Plain Layout

		printf("
\backslash
nProvide a number of color greater than 1 ");
\end_layout

\begin_layout Plain Layout

		scanf("%d", &maxColors);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	for (i = 0; i < LEN; i++) {
\end_layout

\begin_layout Plain Layout

		sol[i] = rand() % maxColors;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	printf("*** hey, try to guess! ***
\backslash
n");
\end_layout

\begin_layout Plain Layout

	turn = 0;
\end_layout

\begin_layout Plain Layout

	do {
\end_layout

\begin_layout Plain Layout

		printf("
\backslash
nGuess my %d numbers (from 0 to %d)
\backslash
n", LEN, maxColors - 1);
\end_layout

\begin_layout Plain Layout

		for (i = 0; i < LEN; i++) {
\end_layout

\begin_layout Plain Layout

			scanf(" %d", &input[i]);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		guessed = 1;
\end_layout

\begin_layout Plain Layout

		for (i = 0; i < LEN; i++) {
\end_layout

\begin_layout Plain Layout

			if (input[i] == sol[i]) {
\end_layout

\begin_layout Plain Layout

				printf("%c ", hit);
\end_layout

\begin_layout Plain Layout

			} else {
\end_layout

\begin_layout Plain Layout

				printf("%c ", miss);
\end_layout

\begin_layout Plain Layout

				guessed = 0;
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		++turn;
\end_layout

\begin_layout Plain Layout

	} while(!guessed);
\end_layout

\begin_layout Plain Layout

	printf("
\backslash
nCongrats! You've guessed in %d turns!
\backslash
n", turn);
\end_layout

\begin_layout Plain Layout

	return 0;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Subsubsection
Lunghezza dinamica
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout

Mastermind (dynamic lenght)
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

#include <stdio.h>
\end_layout

\begin_layout Plain Layout

#include <stdlib.h>
\end_layout

\begin_layout Plain Layout

#include <time.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main() {
\end_layout

\begin_layout Plain Layout

	int* sol;
\end_layout

\begin_layout Plain Layout

	int* input;
\end_layout

\begin_layout Plain Layout

	int i, maxColors, numDigits, guessed, turn;
\end_layout

\begin_layout Plain Layout

	const char hit = 'X';
\end_layout

\begin_layout Plain Layout

	const char miss = '_';
\end_layout

\begin_layout Plain Layout

	srand(time(NULL));
\end_layout

\begin_layout Plain Layout

	printf("***** Welcome to Mastermind *****
\backslash
n");
\end_layout

\begin_layout Plain Layout

	printf("Please tell me how many color you'd like to play with: ");
\end_layout

\begin_layout Plain Layout

	scanf("%d", &maxColors);
\end_layout

\begin_layout Plain Layout

	while(maxColors <= 1) {
\end_layout

\begin_layout Plain Layout

		printf("
\backslash
nProvide a number of color greater than 1 ");
\end_layout

\begin_layout Plain Layout

		scanf("%d", &maxColors);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	printf("Please tell me how many digits should have your challenge: ");
\end_layout

\begin_layout Plain Layout

	scanf("%d", &numDigits);
\end_layout

\begin_layout Plain Layout

	while(numDigits <= 1) {
\end_layout

\begin_layout Plain Layout

		printf("
\backslash
nProvide a number of digits greater than 1 ");
\end_layout

\begin_layout Plain Layout

		scanf("%d", &numDigits);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	sol = (int*) malloc(sizeof(int) * numDigits);
\end_layout

\begin_layout Plain Layout

	if (!sol) {
\end_layout

\begin_layout Plain Layout

		printf("Memory Error: can't allocate.
\backslash
n");
\end_layout

\begin_layout Plain Layout

		return -1;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	input = (int*) malloc(sizeof(int) * numDigits);
\end_layout

\begin_layout Plain Layout

	if (!input) {
\end_layout

\begin_layout Plain Layout

		free(sol);
\end_layout

\begin_layout Plain Layout

		printf("Memory Error: can't allocate.
\backslash
n");
\end_layout

\begin_layout Plain Layout

		return -1;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	for (i = 0; i < numDigits; i++) {
\end_layout

\begin_layout Plain Layout

		sol[i] = rand() % maxColors;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	printf("*** hey, try to guess! ***
\backslash
n");
\end_layout

\begin_layout Plain Layout

	turn  = 0;
\end_layout

\begin_layout Plain Layout

	do {
\end_layout

\begin_layout Plain Layout

		printf("
\backslash
nGuess my %d numbers (from 0 to %d)
\backslash
n", numDigits, maxColors - 1);
\end_layout

\begin_layout Plain Layout

		for (i = 0; i < numDigits; i++) {
\end_layout

\begin_layout Plain Layout

			scanf(" %d", &input[i]);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		guessed = 1;
\end_layout

\begin_layout Plain Layout

		for (i = 0; i < numDigits; i++) {
\end_layout

\begin_layout Plain Layout

			if (input[i] == sol[i]) {
\end_layout

\begin_layout Plain Layout

				printf("%c ", hit);
\end_layout

\begin_layout Plain Layout

			} else {
\end_layout

\begin_layout Plain Layout

				printf("%c ", miss);
\end_layout

\begin_layout Plain Layout

				guessed = 0;
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		++turn;
\end_layout

\begin_layout Plain Layout

	} while(!guessed);
\end_layout

\begin_layout Plain Layout

	printf("
\backslash
nCongrats! You've guessed in %d turns!
\backslash
n", turn);
\end_layout

\begin_layout Plain Layout

	return 0;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Subsubsection
Variante difficile come l'originale
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout

Mastermind (like the original)
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

#include <stdio.h>
\end_layout

\begin_layout Plain Layout

#include <stdlib.h>
\end_layout

\begin_layout Plain Layout

#include <time.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define MAXTURNS 10
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main() {
\end_layout

\begin_layout Plain Layout

	int* sol;
\end_layout

\begin_layout Plain Layout

	int* input;
\end_layout

\begin_layout Plain Layout

	int i, j, maxColors, numDigits, guessed, turn, found;
\end_layout

\begin_layout Plain Layout

	const char black = 'X';
\end_layout

\begin_layout Plain Layout

	const int BLACK_INPUT = -1;
\end_layout

\begin_layout Plain Layout

	const char white = 'O';
\end_layout

\begin_layout Plain Layout

	const int WHITE_INPUT = -2;
\end_layout

\begin_layout Plain Layout

	srand(time(NULL));
\end_layout

\begin_layout Plain Layout

	printf("***** Welcome to Mastermind *****
\backslash
n");
\end_layout

\begin_layout Plain Layout

	printf("Please tell me how many color you'd like to play with: ");
\end_layout

\begin_layout Plain Layout

	scanf("%d", &maxColors);
\end_layout

\begin_layout Plain Layout

	while(maxColors <= 1) {
\end_layout

\begin_layout Plain Layout

		printf("
\backslash
nProvide a number of color greater than 1 ");
\end_layout

\begin_layout Plain Layout

		scanf("%d", &maxColors);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	printf("Please tell me how many digits should have your challenge: ");
\end_layout

\begin_layout Plain Layout

	scanf("%d", &numDigits);
\end_layout

\begin_layout Plain Layout

	while(numDigits <= 1) {
\end_layout

\begin_layout Plain Layout

		printf("
\backslash
nProvide a number of digits greater than 1 ");
\end_layout

\begin_layout Plain Layout

		scanf("%d", &numDigits);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	sol = (int*) malloc(sizeof(int) * numDigits);
\end_layout

\begin_layout Plain Layout

	if (!sol) {
\end_layout

\begin_layout Plain Layout

		printf("Memory Error: can't allocate.
\backslash
n");
\end_layout

\begin_layout Plain Layout

		return -1;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	input = (int*) malloc(sizeof(int) * numDigits);
\end_layout

\begin_layout Plain Layout

	if (!input) {
\end_layout

\begin_layout Plain Layout

		free(sol);
\end_layout

\begin_layout Plain Layout

		printf("Memory Error: can't allocate.
\backslash
n");
\end_layout

\begin_layout Plain Layout

		return -1;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	for (i = 0; i < numDigits; i++) {
\end_layout

\begin_layout Plain Layout

		sol[i] = rand() % maxColors;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	printf("*** hey, try to guess! ***
\backslash
n");
\end_layout

\begin_layout Plain Layout

	turn  = 0;
\end_layout

\begin_layout Plain Layout

	do {
\end_layout

\begin_layout Plain Layout

		printf("
\backslash
nGuess my %d numbers (from 0 to %d)
\backslash
n", numDigits, maxColors - 1);
\end_layout

\begin_layout Plain Layout

		for (i = 0; i < numDigits; i++) {
\end_layout

\begin_layout Plain Layout

			scanf(" %d", &input[i]);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		/* look for blacks */
\end_layout

\begin_layout Plain Layout

		guessed = 1;
\end_layout

\begin_layout Plain Layout

		for (i = 0; i < numDigits; i++) {
\end_layout

\begin_layout Plain Layout

			if (input[i] == sol[i]) {
\end_layout

\begin_layout Plain Layout

				input[i] = BLACK_INPUT;
\end_layout

\begin_layout Plain Layout

			} else {
\end_layout

\begin_layout Plain Layout

				guessed = 0;
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		/* look for whites */
\end_layout

\begin_layout Plain Layout

		for (i = 0; i < numDigits; i++) {
\end_layout

\begin_layout Plain Layout

			if (input[i] != BLACK_INPUT) {
\end_layout

\begin_layout Plain Layout

				found = 0;
\end_layout

\begin_layout Plain Layout

				for (j = 0; j < numDigits && !found; j++) {
\end_layout

\begin_layout Plain Layout

					if (input[j] == sol[i]) {
\end_layout

\begin_layout Plain Layout

						input[j] = WHITE_INPUT;
\end_layout

\begin_layout Plain Layout

						found = 1;
\end_layout

\begin_layout Plain Layout

					}
\end_layout

\begin_layout Plain Layout

				}
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		/* output */
\end_layout

\begin_layout Plain Layout

		for (i = 0; i < numDigits; i++) {
\end_layout

\begin_layout Plain Layout

			if (input[i] == BLACK_INPUT) {
\end_layout

\begin_layout Plain Layout

				printf("%c ", black);
\end_layout

\begin_layout Plain Layout

			} else if (input[i] == WHITE_INPUT) {
\end_layout

\begin_layout Plain Layout

				printf("%c ", white);
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		++turn;
\end_layout

\begin_layout Plain Layout

	} while(!guessed && turn < MAXTURNS);
\end_layout

\begin_layout Plain Layout

	if (turn < MAXTURNS) {
\end_layout

\begin_layout Plain Layout

		printf("
\backslash
nCongrats! You've guessed in %d turns!
\backslash
n", turn);
\end_layout

\begin_layout Plain Layout

	} else {
\end_layout

\begin_layout Plain Layout

		printf("Computer Wins
\backslash
n");
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	return 0;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section*
Licenza e crediti
\end_layout

\begin_layout Subsection*
Licenza beerware
\begin_inset Foot
status open

\begin_layout Plain Layout
http://people.freebsd.org/~phk/
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Quest'opera è stata redatta da Stefano Cherubin.
 Mantenendo questa nota, puoi fare quello che vuoi con quest'opera.
 Se ci dovessimo incontrare e tu ritenessi che quest'opera lo valga, in
 cambio puoi offrirmi una birra.
\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\end_body
\end_document
